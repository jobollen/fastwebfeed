<?php
// $Id$
/**
 * @file
 * fastwebfeed.module
 * 
 * This a ".module"-file. 
 * 
 * @author Jo Bollen <fastwebfeed@gmail.com>
 * @site http://cupid-project.be/project/fastwebfeed-module
 * @filesource
 */

include(drupal_get_path('module', 'fastwebfeed') .'/fastwebfeed_node.inc');

/**
 * Implementation of the hook_theme()
 * 
 * @return array
 */
function fastwebfeed_theme() {
  return array(
    'fastwebfeed_info' => array(
      'arguments' => array(),
    ),
  );
}

 /**
 * Implementation of the hook_perm()
 * Administer -> User management -> Access Control
 * 
 * @return array permission 'administer fastwebfeed'
 */
function fastwebfeed_perm() {
  return array('administer fastwebfeed');
}

/**
 * Implementation of hook_help().
 */
function fastwebfeed_help($switch, $arg) {
  global $base_path;
  $module_path = $base_path . drupal_get_path('module', 'fastwebfeed');
  
  switch ($switch) {
    case 'admin/help#fastwebfeed':
      $output = _fastwebfeed_description();
      return $output;
  }
}

/*
 * The help description of the Fastwebfeed module.
 * Get help descriptions by calling the hook_fastwebfeed_description() in other modules.
 *
 * @return string $output
 *   A help description 
 */
function _fastwebfeed_description() {
  global $base_path;
  $module_path = drupal_get_path('module', 'fastwebfeed');
  $module_path_sup = drupal_get_path('module', 'fastwebfeed_sup');
  $module_path_pubsubhubbub = drupal_get_path('module', 'fastwebfeed_pubsubhubbub');
  
  $output = '<p>
              When the Publisher insert a new node then your RSS feeds will be updated. 
              The Fastwebfeed module pings the Service(s)/Hub(s) saying that there\'s an update.
              It\'s a simple way to let people know in real-time when your feed is updated using the SimpleUpdateProtocol and PubSubHubbub.
            </p>'
            .'<h3>Fastwebfeed.module</h3>
  					<ul>';
  $output .= '<li><h3>Settings</h3> Edit the Fastwebfeed settings here. '. l('Administer > Site configuration > Fastwebfeed > Settings ', 'admin/settings/fastwebfeed/settings')
            . '<ul>
              <li>PubSubHubbub 
                <ul>'
            . ((module_exists(fastwebfeed_pubsubhubbub))?'
                  <li>fastwebfeed_pubsubhubbub.module
                    <ul>
                      <li>Config here the "hub" definitions '. l('Administer > Site configuration > Fastwebfeed > Pubsubhubbub > Hub(s) settings ', 'admin/settings/fastwebfeed/pubsubhubbub/hub') .'</li>
            			    <li>Read '. l('CHANGELOG.txt', $module_path_pubsubhubbub .'/CHANGELOG.txt') .'</li>
          				  </ul>
          			  </li>':'
          			  <li>'. l('Activate the fastwebfeed_pubsubhubbub.module here. URL: <em>admin/build/modules</em>', 'admin/build/modules', array('fragment' => 'edit-status-fastwebfeed-pubsubhubbub-wrapper', 'attributes' => array('style' => 'color:red'), 'html' => TRUE)) .'</li>
          			  ')
              . '</ul>
          		</li>'
            . '<li>SimpleUpdateProtocol (SUP)
                <ul>'
            . ((module_exists(fastwebfeed_sup))?'
                  <li>fastwebfeed_sup.module
                    <ul>
                      <li>Config here the "service" definitions '. l('Administer > Site configuration > Fastwebfeed > SUP > service(s) settings', 'admin/settings/fastwebfeed/sup/services') .'</li>
              			  <li>Config here the "&lt;LINK&gt; attribute" definitions '. l('Administer > Site configuration > Fastwebfeed > SUP > service(s) &lt;LINK&gt; attributes', 'admin/settings/fastwebfeed/sup/service/link') .'</li>
              			  <li>Read '. l('CHANGELOG.txt', $module_path_sup .'/CHANGELOG.txt') .'</li>
            			  </ul>
            	    </li>':'
            	    <li>'. l('Activate the fastwebfeed_sup.module here URL: <em>admin/build/modules</em>', 'admin/build/modules', array('fragment' => 'edit-status-fastwebfeed-sup-wrapper', 'attributes' => array('style' => 'color:red'), 'html' => TRUE)) .'</li>')
              . '</ul>
              </li>
              </ul>
              </li>';
    
  $plugged_modules = FALSE;
  $plugged_modules_outputs = module_invoke_all('fastwebfeed_description');
  if (!empty($plugged_modules_outputs[0])) {
    $plugged_modules = TRUE;
  }
  if ($plugged_modules == TRUE) {
    $output .= '<li><h3>Plugged modules</h3> Edit the plugged modules settings here '. l('Administer > Site configuration > Fastwebfeed > Plugged modules ', 'admin/settings/fastwebfeed/plugged_modules') .')'; 
  }
  foreach ($plugged_modules_outputs as $plugged_modules_output) {
    $output .= $plugged_modules_output;
  }
  if ($plugged_modules == TRUE) {
    $output .= '</li>';
  }
  
  $output .= '<li><h3>Info</h3> about the Fastwebfeed module '. l('Administer > Site configuration > Fastwebfeed > Info ', 'admin/settings/fastwebfeed/info') .'</li>';
  $output .= '</ul>';
  $output .= 'Read '. l('README.txt', $module_path .'/README.txt') .'<br/>'
  .'Read '. l('CHANGELOG.txt', $module_path .'/CHANGELOG.txt') .'<br/>'
  .'<p> 
  Current maintainer(s):Jo Bollen ('. l('JoBo', 'http://drupal.org/user/111415', array('attributes' => array('target' => '_blank'))) .')<br/>
	Documentation:'. l('http://cupid-project.be/project/fastwebfeed-module', 'http://cupid-project.be/project/fastwebfeed-module', array('attributes' => array('target' => '_blank'))) .'</p>'
  .'<p></p>';
  
  return $output;
}

/**
 * Implementation of the hook_menu()
 * Administer -> Site configuration -> fastwebfeed
 * 
 * @return array menu $items
 */
function fastwebfeed_menu() {
  $items = array();
  $items['admin/settings/fastwebfeed'] = array(
    'title' => 'Fastwebfeed',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fastwebfeed_settings_admin'),
    'access arguments' => array('administer fastwebfeed'),
  );
  $items['admin/settings/fastwebfeed/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'access arguments' => array('administer fastwebfeed'),
  );
  $items['admin/settings/fastwebfeed/plugged_modules'] = array(
    'title' => 'Plugged modules',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fastwebfeed_plugged_modules_admin'),
    'weight' => 1,
    'access arguments' => array('administer fastwebfeed'),
  );
  $items['admin/settings/fastwebfeed/info'] = array(
    'title' => 'Info',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fastwebfeed_info_admin'),
    'weight' => 2,
    'access arguments' => array('administer fastwebfeed'),
  );
  return $items;
}

/**
 * Admin settings form
 * Administer -> Site configuration -> fastwebfeed -> settings
 * 
 * @return $form 
 *   A form of fastwebfeed_settings_admin
 * 
 * @see fastwebfeed_menu()
 */
function fastwebfeed_settings_admin() {
  $module_pubsubhubbub = FALSE;
  $module_pubsubhubbub_text = '<li>'. l('the PubSubHubbub module', 'admin/build/modules', array('fragment' => 'edit-status-fastwebfeed-pubsubhubbub-wrapper')) .'</li>';
  if (module_exists('fastwebfeed_pubsubhubbub')) {
    $form[] = fastwebfeed_pubsubhubbub_include_fastwebfeed_settings_admin();
    $module_pubsubhubbub = TRUE;
  }
  
  $module_sup = FALSE;
  $module_sup_text = '<li>'. l('the SimpleUpdateProtocol (SUP) module', 'admin/build/modules', array('fragment' => 'edit-status-fastwebfeed-sup-wrapper')) .'</li>';
  if (module_exists('fastwebfeed_sup')) {
    $form[] = fastwebfeed_sup_include_fastwebfeed_settings_admin();
    $module_sup = TRUE;
  }
  
  if ($module_pubsubhubbub == TRUE || $module_sup == TRUE) {
    $form['fieldset_fastwebfeed'] = array(
      '#type' => 'fieldset',
      '#title' => t('Other settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['fieldset_fastwebfeed']['fastwebfeed_check_watchdog_log_admin'] = array(
      '#type' => 'checkbox',
      '#title' => t('Watchdog Log'),
      '#default_value' => variable_get('fastwebfeed_check_watchdog_log_admin', ''),
    );
    
    // Add default buttons to a form and set its prefix
    // @see system_settings_form() in system module.
    $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration') );
    $form['buttons']['reset'] = array('#type' => 'submit', '#value' => t('Reset to defaults') );
  
    if (!empty($_POST) && form_get_errors()) {
      drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');
    }
    
    $form['#submit'][] = 'fastwebfeed_settings_admin_submit';
    $form['#theme'] = 'system_settings_form';
  }
  
  if ($module_pubsubhubbub == FALSE || $module_sup == FALSE) {
    $form['fieldset_fastwebfeed'] = array(
      '#type' => 'fieldset',
      '#description' => 'Please activate <ul>'. (($module_pubsubhubbub == FALSE)?$module_pubsubhubbub_text:'') . (($module_sup == FALSE)?$module_sup_text:'') .'</ul>',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
  }
  return $form;
}

/**
 * Execute the system_settings_form and invoke "reset all" in the hook_fastwebfeed_path().
 */
function fastwebfeed_settings_admin_submit($form, &$form_state) {
  system_settings_form_submit($form, &$form_state);
  module_invoke_all('fastwebfeed_path', '', 'reset all');
}


/**
 * A piece of the Fastwebfeed admin setting form
 * Administer -> Site configuration -> fastwebfeed -> Plugged modules
 * Get plugged admin forms by calling the hook_fastwebfeed_plugged_modules_admin() in other modules.
 * 
 * @return $form
 * 
 * @see fastwebfeed_menu()
 */
function fastwebfeed_plugged_modules_admin() {
  $buttons = FALSE;
  $form[] = module_invoke_all('fastwebfeed_plugged_modules_admin');
  if (!empty($form[0])) {
    $buttons = TRUE;
  }
  
  if ($buttons == TRUE) {
    // Add default buttons to a form and set its prefix
    // @see system_settings_form() in system module.
    $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration') );
    $form['buttons']['reset'] = array('#type' => 'submit', '#value' => t('Reset to defaults') );
  
    if (!empty($_POST) && form_get_errors()) {
      drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');
    }
    
    $form['#submit'][] = 'fastwebfeed_settings_admin_submit';
    $form['#theme'] = 'system_settings_form';
  }
  else {
    $form['fieldset_fastwebfeed'] = array(
      '#type' => 'fieldset',
      '#description' => 'No plugged modules',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
  }
  return $form;
}


/**
 * Admin settings form
 * Administer -> Site configuration -> fastwebfeed -> info
 * 
 * @return $form
 * 
 * @see fastwebfeed_menu()
 */
function fastwebfeed_info_admin() {
  global $base_path;
  $form['fieldset_fastwebfeed_info'] = array(
    '#type' => 'fieldset',
    '#title' => t("An overview of the Fastwebfeed URL's"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $feed_urls = fastwebfeed_get_feed_url('', 'all');
  $counter = 1;
  foreach ($feed_urls as $feed_url) {
    $form['fieldset_fastwebfeed_info']['fastwebfeed_info_'. $counter .'_admin'] = array(
      '#type' => 'fieldset',
      '#title' => t('@title', array('@title' => $feed_url)),
      '#value' => theme('fastwebfeed_info', $feed_url),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $counter++;
  }
  $form['fieldset_fastwebfeed_info_links'] = array(
    '#type' => 'fieldset',
    '#title' => t("Fastwebfeed Help"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => _fastwebfeed_description(),
  );
  return $form;
}


/**
 * Admin settings form
 * Administer -> Site configuration -> fastwebfeed -> info
 * 
 * @return mixed $output info_admin
 * 
 * @see fastwebfeed_info_admin()
 */
function theme_fastwebfeed_info($feed_url) {
  global $base_path, $base_url;
  $output = '';
      $header_wrap = array();
      $header_wrap = array( t('Fastwebfeed URL') );
      $rows_wrap = array();
      $rows_wrap[] = array( array( 'data' => '<a href="'. $feed_url .'" target="_blank" >'. $feed_url .'</a>' ) );
      if (module_exists(fastwebfeed_sup)) {
        $output_inner = fastwebfeed_sup_include_fastwebfeed_info_admin($feed_url);
        $rows_wrap[] = array( array( 'data' => $output_inner ) );
      }
      if (module_exists(fastwebfeed_pubsubhubbub)) {
        $output_inner = fastwebfeed_pubsubhubbub_include_fastwebfeed_info_admin();
        $rows_wrap[] = array( array( 'data' => $output_inner ) );
      }
      $output .= theme('table', $header_wrap , $rows_wrap );
  return $output;
}


/**
 * Turn on output buffering
 */
function fastwebfeed_ob_start() {
  global $base_url, $base_path;
  if (module_exists('fastwebfeed_pubsubhubbub') || module_exists('fastwebfeed_sup')) {
    ob_start();
  }
}


/**
 * Get current buffer contents and delete current output buffer
 * 
 * @see fastwebfeed_node_feed()
 * @see fastwebfeed_taxonomy_term_page()
 * 
 * @return mixed feed
 */
function fastwebfeed_ob_end() {
  global $base_url, $base_path;
  if (module_exists('fastwebfeed_pubsubhubbub') || module_exists('fastwebfeed_sup')) {
    $feed = ob_get_clean();
  }
  if (module_exists('fastwebfeed_pubsubhubbub') || module_exists('fastwebfeed_sup')) {
    // hack to add the atom definition to the RSS feed
    $pattern = '/<rss version="(.+)">/i';
    $replacement = '<rss version="$1" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" >';
    // change <rss version="X.XX"> to <rss version="X.XX" xmlns:atom="http://www.w3.org/2005/Atom">
    $feed = preg_replace($pattern, $replacement, $feed);
  }
  if (module_exists('fastwebfeed_pubsubhubbub')) {
    // hack to add a link element/attributes to the RSS feed
    $pubsubhubbub_hubs = _pubsubhubbub_get_active_hubs();
    if (!empty($pubsubhubbub_hubs)) {
      $pubsubhubbub_last_item = end($pubsubhubbub_hubs);
      $pubsubhubbub_last_item = each($pubsubhubbub_hubs);
      reset($pubsubhubbub_hubs);
      foreach ($pubsubhubbub_hubs as $pubsubhubbub_hub) {
        $pattern = '/<channel>/i';
        $pubsubhubbub_link_element = '';
        $pubsubhubbub_link_element .= _pubsubhubbub_hub_link_get_link('string', $pubsubhubbub_hub); // '<atom:link rel="hub" href="'.$value->url.'"/>';
        $replacement = '<channel>'."\n". $pubsubhubbub_link_element;
        $feed = preg_replace($pattern, $replacement, $feed);
      }
    }
  }
  if (module_exists('fastwebfeed_sup')) {
    $sup_services = _sup_service_get_active_services();
    if (!empty($sup_services)) {
      foreach ($sup_services as $sup_service) {
        // hack to add a link element/attributes for SUP to the RSS feed
        $pattern = '/<channel>/i';
        // get the sup definition
          // get current feed url
          $sup_feed_url = fastwebfeed_get_feed_url_current();
          // get SUP ID
          $sup_id = _sup_get_hash_supid($sup_feed_url, $sup_service->supid_length);
          // get <link> element
          $sup_feed_link = _sup_service_link_get_link('string', $sup_service, $sup_feed_url, $sup_id);
          // get SUP ping URL
          $sup_ping_url = $sup_service->ping_url;
          $sup_ping_url = str_replace('%SUPID%', $sup_id, $sup_ping_url);
          $sup_ping_url = str_replace('%FEED_URL%', $sup_feed_url, $sup_ping_url);
          // get SUP URL
          $sup_url = $sup_service->url;
          $sup_url = str_replace('%SUPID%', $sup_id, $sup_url);
          $sup_url = str_replace('%FEED_URL%', $sup_feed_url, $sup_url);
        $replacement = '<channel>'."\n". $sup_feed_link;
        $feed = preg_replace($pattern, $replacement, $feed);
      }
    }
  }
  if (module_exists('fastwebfeed_sup')) {
    if (!empty($sup_services)) {
      // add header
      drupal_set_header('X-SUP-ID: '. $sup_url);
    }
  }
  if (module_exists('fastwebfeed_pubsubhubbub') || module_exists('fastwebfeed_sup')) {
    echo $feed;
  }
}

/**
 * Performs validation on a custom form.
 *
 * @param int $form_id
 * 	 A unique string identifying the form for validation.
 * @param array $form_state
 *   An array of values mirroring the values returned by a given form
 *   when it is submitted by a user.
 * @param string $form_value_admin_suffix
 *   The suffix of a input field in a "admin"-form 
 * @param string $form_value_row_prefix
 *   The prefix of a input field in a "admin"-form
 * @param int $total_admin_fields
 *   The total of input fields in a "admin"-form
 * @param int $total_required_admin_fields
 *   The total of required input fields in a "admin"-form
 */
function fastwebfeed_form_validate($form = NULL, &$form_state = NULL, $form_value_prefix = NULL, $form_value_admin_suffix = NULL, $form_value_row_prefix = NULL, $total_admin_fields = 0, $total_required_admin_fields = 0) {
  if ($form !== NULL && $form_state !== NULL && $form_value_prefix !== NULL && $form_value_admin_suffix !== NULL && $form_value_row_prefix !== NULL && is_numeric($total_admin_fields) && is_numeric($total_required_admin_fields)) {
    $check_form = array();
    $check_table_items = array();
    foreach ($form_state['clicked_button']['#post'] as $post_key => $post_value) {
      // $find variables
      $find = strpos((string)$post_key, $form_value_prefix); // $form_value_prefix;
      $find_row = strpos((string)$post_key, $form_value_row_prefix); // $form_value_row_prefix
      // if find is a success
      // then there will be a check if the admin_table_items are empty or full
      if ($find !== FALSE) {
        if ($find_row !== FALSE ) {
          if (isset($form_state['clicked_button']['#post'][$post_key])) {
            $row = explode('_', $post_key);
            $object_id = array_pop($row);
            $object_id_length = (int)strlen($object_id);
            $object_id_length = $object_id_length+1;
            $row_id = array_pop($row);
            $row_id_length = (int)strlen($row_id);
            $row_id_length = $row_id_length+1;
            $prefix_length = (int)strlen($form_value_prefix) + (int)strlen($form_value_row_prefix);
            $row_key = drupal_substr(drupal_substr($post_key, 0, -$object_id_length-$row_id_length), $prefix_length);
            if ($form_state['clicked_button']['#post'][$post_key] != '' || $row_key == 'delete') {
              $check_table_items['fill'][] = $post_key; 
            }
            else {
              $check_table_items['empty'][] = $post_key; 
            }
          }
        }
      }
    }
    foreach ($form_state['values'] as $post_key => $post_value) {
      // $find variable
      $find_admin = strpos((string)$post_key, $form_value_admin_suffix); // $form_value_admin_suffix
      // if find is a success
      // then there will be a check if the admin_items are empty or full
      if ($find_admin !== FALSE ) {
        if (isset($post_value)) {
          if ($post_value != '' || is_numeric($post_value)) {
              $check_form['fill'][] = $post_key; 
          }
          else {
            $check_form['empty'][] = $post_key;
          }
        }
      }
    }
    // check if there are more empty admin_items then required
    if (count($check_form['empty']) <  ($total_admin_fields - $total_required_admin_fields) && isset($check_form['empty'])) { // $total_admin_fields
      foreach ($check_form['empty'] as $check_key => $check_value) {
        form_set_error($check_value, t('You can\'t add. The field is required.'));
      }
    }
    // check if there are empty admin_table_items
    if (isset($check_table_items['empty'])) {
      foreach ($check_table_items['empty'] as $check_key => $check_value) {
        form_set_error($check_value, t('You can\'t edit. The table field is required.'));
      }
    }
  }
}

/**
 * Processes the custom-submitted form.
 *
 * @param int $form_id
 * 	 A unique string identifying the form for validation.
 * @param array $form_state
 *   An array of values mirroring the values returned by a given form
 *   when it is submitted by a user.
 * @param string $function_query_add
 *   The name of a function which adds the form-values in the database.
 * @param string $function_query_delete
 *   The name of a function which delete the form-values in the database.
 * @param string $function_query_update
 *   The name of a function which update the form-values in the database.
 * @param string $form_value_admin_suffix
 *   The suffix of a input field in a "admin"-form 
 * @param string $form_value_row_prefix
 *   The prefix of a input field in a "admin"-form
 * @param int $total_admin_fields
 *   The total of input fields in a "admin"-form
 * @param int $total_required_admin_fields
 *   The total of required input fields in a "admin"-form
 */
function fastwebfeed_form_submit($form = NULL, &$form_state = NULL, $function_query_add = NULL, $function_query_delete = NULL, $function_query_update = NULL, $form_value_prefix = NULL, $form_value_admin_suffix = NULL, $form_value_row_prefix = NULL, $total_admin_fields = 0, $total_required_admin_fields = 0) {
  if ($form !== NULL && $form_state !== NULL && $function_query_add !== NULL && $function_query_delete !== NULL && $function_query_update !== NULL && $form_value_prefix !== NULL && $form_value_admin_suffix !== NULL && $form_value_row_prefix !== NULL && is_numeric($total_admin_fields) && is_numeric($total_required_admin_fields) ) {
    $check_form = array();
    foreach ($form_state['clicked_button']['#post'] as $post_key => $post_value) {
      // $find variables
      $find = strpos((string)$post_key, $form_value_prefix); // $form_value_prefix;
      $find_row = strpos((string)$post_key, $form_value_row_prefix); // $form_value_row_prefix
      // if find is a success
      // then there will be a check if the admin_table_items are empty or full
      if ($find !== FALSE) {
        if ($find_row !== FALSE ) {
          if (isset($form_state['clicked_button']['#post'][$post_key])) {
            if ($form_state['clicked_button']['#post'][$post_key] != '') {
              $row = explode('_', $post_key);
              $object_id = array_pop($row);
              if ($object_id != '0') {
                $object_id_length = (int)strlen($object_id);
                $object_id_length = $object_id_length+1;
                $row_id = array_pop($row);
                $row_id_length = (int)strlen($row_id);
                $row_id_length = $row_id_length+1;
                $prefix_length = (int)strlen($form_value_prefix) + (int)strlen($form_value_row_prefix);
                $row_key = drupal_substr(drupal_substr($post_key, 0, -$object_id_length-$row_id_length), $prefix_length);
                $object[$object_id]->$row_key = (string)$post_value;
              }
            }
          }
        }
      }
    }
    foreach ($form_state['values'] as $post_key => $post_value) {
      // $find variable
      $find_admin = strpos((string)$post_key, $form_value_admin_suffix); // $form_value_admin_suffix
      // if find is a success
      // then there will be a check if the admin_items are empty or full
      if ($find_admin !== FALSE ) {
        if (isset($post_value)) {
          if ($post_value != '' || is_numeric($post_value)) {
            $row_key = drupal_substr(drupal_substr($post_key, 0, -(int)strlen($form_value_admin_suffix)), (int)strlen($form_value_prefix)); // (int)strlen($form_value_admin_suffix)), (int)strlen($form_value_prefix)
            $object[0]->$row_key = (string)$post_value;
          }
        }
      }
    }
    // 	Check that all admin_items are present
    //  then add admin_items
    if (count((array)$object[0]) == $total_admin_fields) { // $total_admin_fields
      $function_query_add($object[0]);
    }
    // 	Check that all admin_table_items are present
    //  then update or delete the admin_table_items
    foreach ($object as $key => $value) { 
      $subject_id = $form_value_prefix .'id';
      $value->$subject_id = $key;
      if (count((array)$object[$key]) >= $total_admin_fields) { // $total_admin_fields
        // Browsers return "on" only for checked checkboxes. Non-checked are completely ignored and not included in the post.
        // So there has been chosen for this preliminary solution. 
        if ($key != 0) {
          if (isset($value->status) && $value->status == '1') {
            $value->status = 1;
          }
          else {
            $value->status = 0;
          }
          $function_query_update($value);
          if ($value->delete == '1') {
            $function_query_delete($value);
          }
        } 
      }
    }
  }
  drupal_set_message(t('The "Fastwebfeed" configuration have been saved.'));
}

/**
 * Get fastwebfeed paths by calling the hook_fastwebfeed_path() in other modules
 * hook_fastwebfeed_path()
 *  The parameters are 
 *  -  "$object" : "node", ... objects 
 *  -  "$type" the values could be "node", "comment", "all", "reset all", ...
 *  This function retrieves feed paths related to the different types ($types)
 *  example:
 *  - related to a "node"
 *  - related to a "comment"
 *  - from "all" existing feeds
 *  or "resets all" feed paths.
 *  The param $object is not necessary except for the modules how need a specific object ($object)
 *  
 * @param $object
 *  an object
 * @param $type
 *  type of return
 * @return array
 *  array of fastwebfeed paths
 */
function fastwebfeed_get_feed_path($object = '', $type = 'all') {
  $feed_paths = '';
  $feed_paths = module_invoke_all('fastwebfeed_path', $object, $type);
  if (module_exists(path)) {
    $feed_paths = fastwebfeed_get_path_alias($feed_paths);
  }
  return $feed_paths;
}

/**
 * Return all fastwebfeeds also alias set by the administrator.
 *
 * @param $feed_paths
 *   An internal Drupal paths.
 *
 * @return $feed_paths
 *   Return all fastwebfeeds also alias set by the administrator.
 */
function fastwebfeed_get_path_alias($feed_paths = '') {
  if (!empty($feed_paths)) {
    foreach ($feed_paths as $feed_path) {
      $feed_path_ = '';
      $feed_path_ = drupal_get_path_alias($feed_path);
      if ($feed_path != $feed_path_) {
        $feed_paths[] = $feed_path_;
      }
    }
    return $feed_paths;
  }
  return $feed_paths[] = '';
}

/**
 * Get fastwebfeed URL's
 * 
 * @param $object
 * 		an object
 * @param $type
 *    type of return
 * @return $feed_urls
 * 		array of fastwebfeed URL's
 * 
 * @see fastwebfeed_get_feed_path()
 */
function fastwebfeed_get_feed_url($object = '', $type = 'all') {
  global $base_path, $base_url;
  $find_base_path = strpos($base_url, ((drupal_substr($base_path, 0, -1) == NULL)?FALSE:drupal_substr($base_path, 0, -1)));
  $feed_paths = fastwebfeed_get_feed_path($object, $type);
  $feed_urls = array();
  if (!empty($feed_paths)) {
    foreach ($feed_paths as $key => $value) {
      if ($find_base_path !== FALSE) {
        $feed_urls[] =  $base_url .'/'. $value;
      }
      else {
        $feed_urls[] =  $base_url . $base_path . $value;
      }
    }
  }
  return $feed_urls;
}

/**
 * Get current fastwebfeed URL
 * 
 * @param string $feed_path
 *   current feed path
 * @return string $feed_url
 *   current feed URL
 */
function fastwebfeed_get_feed_url_current($feed_path = '') {
  global $base_path, $base_url;
  if (empty($feed_path)) { 
    $feed_path = $_GET['q'];
    $find_feed_path_alias = strpos(drupal_substr(request_uri(), 1), drupal_lookup_path('alias', $_GET['q']));
    if ($find_feed_path_alias !== FALSE) {
      if (module_exists(path)) {
        $feed_path = drupal_get_path_alias($feed_path);
      }
    }
  } 
  $find_base_path = strpos($base_url, ((drupal_substr($base_path, 0, -1) == NULL)?FALSE:drupal_substr($base_path, 0, -1)));
  if ($find_base_path !== FALSE) {
    $feed_url = $base_url .'/'. $feed_path;
  }
  else {
    $feed_url = $base_url . $base_path . $feed_path;
  }
  return $feed_url;
}