<?php
// $Id$
/**
 * @file
 * fastwebfeed_aggregator.module
 * 
 * This a ".module"-file. 
 * 
 * @author Jo Bollen <fastwebfeed@gmail.com>
 * @site http://cupid-project.be/project/fastwebfeed-module
 * @filesource
 */

/**
 * Implementation of the hook_menu_alter()
 */
function fastwebfeed_aggregator_menu_alter(&$items) {
  $items['aggregator/rss'] = array(
    'title' => 'RSS feed',
    'page callback' => 'fastwebfeed_aggregator_handler_aggregator_page_rss',
    'access arguments' => array('access news feeds'),
    'type' => MENU_CALLBACK,
  );
}

/**
 * Implementation of the hook_fastwebfeed_description()
 * Returns a piece of the Fastwebfeed admin info form
 * 
 * @return $output
 *   string
 *   
 * @see fastwebfeed.module
 */
function fastwebfeed_aggregator_fastwebfeed_description() {
  global $base_path;
  $module_path = drupal_get_path('module', 'fastwebfeed');
  $module_path_sup = drupal_get_path('module', 'fastwebfeed_sup');
  $module_path_pubsubhubbub = drupal_get_path('module', 'fastwebfeed_pubsubhubbub');
  $module_path_aggregator = drupal_get_path('module', 'fastwebfeed_aggregator');
  
  $output = '
  		<ul>
    		<li>fastwebfeed_aggregator.module
      		<ul>
      			<li>Settings: '. l('Administer > Site configuration > Fastwebfeed > plugged modules - "Settings for the aggregator.module"', 'admin/settings/fastwebfeed/plugged_modules') .'</li>
      			<li>Read '. l('CHANGELOG.txt', $module_path_aggregator .'/CHANGELOG.txt') .'</li>
      		</ul>
      	</li>
    	</ul>';
  return $output;
}

/**
 * Implementation of the hook_fastwebfeed_plugged_modules_admin()
 * A piece of the Fastwebfeed admin setting form
 * Administer -> Site configuration -> fastwebfeed -> plugged module
 * 
 * @return array $form 
 * 
 * @see fastwebfeed.module
 */
function fastwebfeed_aggregator_fastwebfeed_plugged_modules_admin() {
  global $base_url, $base_path;
  $fastwebfeed_sup_module_path = drupal_get_path('module', 'fastwebfeed_aggregator');
  $fastwebfeed_module_path = drupal_get_path('module', 'fastwebfeed');
  
  $form['fieldset_fastwebfeed_aggregator'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings for the aggregator.module'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['fieldset_fastwebfeed_aggregator']['fieldset_aggregator_when_to_ping'] = array(
    '#type' => 'fieldset',
    '#title' => t('When/what to ping (or notify)?'),
    '#description' => t('The question is, when to ping a service (or notify a hub) with an updated "aggregator" feed?'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['fieldset_fastwebfeed_aggregator']['fieldset_aggregator_when_to_ping']['fastwebfeed_aggregator_check_ping_on_cron_admin'] = array(
    '#type' => 'checkbox',
    '#title' => t('On cron.'),
    '#description' => t('If checked, the hubs/services will be notified on cron with a update notification refered to the updated "aggregator" feed.'),
    '#default_value' => variable_get('fastwebfeed_aggregator_check_ping_on_cron_admin', ''),
  );
  
  $form['fieldset_fastwebfeed_aggregator']['fieldset_aggregator_what_to_ping'] = array(
    '#type' => 'fieldset',
    '#title' => t('What to ping (or notify)?'),
    '#description' => t('The question is, which "aggregator" feed must be pinged to a service? (or which feed must be notified to a hub?)'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['fieldset_fastwebfeed_aggregator']['fieldset_aggregator_what_to_ping']['fieldset_aggregator_feed'] = array(
    '#type' => 'fieldset',
    '#title' => t('aggregator/rss feed'),
    '#description' => t('<em>example: '. l($base_url . $base_path .'aggregator/rss', 'aggregator/rss', array('attributes' => array('target' => '_blank'))) .'</em>'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['fieldset_fastwebfeed_aggregator']['fieldset_aggregator_what_to_ping']['fieldset_aggregator_feed']['fastwebfeed_aggregator_check_aggregator_feed_admin'] = array(
    '#type' => 'checkbox',
    '#title' => t('aggregator/rss'),
    '#description' => t('If checked, the following "aggregator" feed will be notified/pinged.'),
    '#default_value' => variable_get('fastwebfeed_aggregator_check_aggregator_feed_admin', ''),
  );
  
  $form['fieldset_fastwebfeed_aggregator']['fieldset_aggregator_what_to_ping']['fieldset_category_feed'] = array(
    '#type' => 'fieldset',
    '#title' => t('category feed(s)'),
    '#description' => t('<em>example: '. l($base_url . $base_path .'aggregator/rss/1', 'aggregator/rss/1', array('attributes' => array('target' => '_blank'))) .'</em>'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['fieldset_fastwebfeed_aggregator']['fieldset_aggregator_what_to_ping']['fieldset_category_feed']['fastwebfeed_aggregator_check_category_all_admin'] = array(
    '#type' => 'checkbox',
    '#title' => t('All categories'),
    '#description' => t('If checked, the "aggregator" feeds of "All categories" will be notified/pinged.'),
    '#default_value' => variable_get('fastwebfeed_aggregator_check_category_all_admin', ''),
  );
  $form['fieldset_fastwebfeed_aggregator']['fieldset_aggregator_what_to_ping']['fieldset_category_feed']['fastwebfeed_aggregator_check_category_some_admin'] = array(
    '#type' => 'checkbox',
    '#title' => t('One of the following categories'),
    '#description' => t('If checked, only the "aggregator" feeds of "One of the following categories" will be notified/pinged.<br/>'),
    '#default_value' => variable_get('fastwebfeed_aggregator_check_category_some_admin', ''),
  );
  $form['fieldset_fastwebfeed_aggregator']['fieldset_aggregator_what_to_ping']['fieldset_category_feed']['fastwebfeed_aggregator_select_category_admin'] = array(
    '#type' => 'select',
    '#title' => t('Overview of categories'),
    '#description' => t('Select one of the following "aggregator" categories.'),
    '#default_value' => variable_get('fastwebfeed_aggregator_select_category_admin', ''),
    '#options' => _fastwebfeed_aggregator_category_form_all(),
    '#multiple' => TRUE,
  );
  return $form;
}

/**
 * get the aggregator categories
 * 
 * @return $options
 */
function _fastwebfeed_aggregator_category_form_all() {
  $options = array();
  $result = db_query('SELECT * FROM {aggregator_category}');
  while ($aggregator_categorie = db_fetch_object($result)) {
    $options[$aggregator_categorie->cid] = $aggregator_categorie->title;
  }
  return $options;
}

/**
 * Menu callback; publish an RSS feed and
 * extends the aggregator RSS feed with the fastwebfeed definitions.
 * 
 * @return unknown_type
 */
function fastwebfeed_aggregator_handler_aggregator_page_rss() {
  fastwebfeed_ob_start();
  if (!function_exists('aggregator_page_rss')) {
    /** 
     * including the aggregator.pages.inc file shouldn't be necessary, because
     * TaxMan is correctly using hook_menu_alter to change the callback.
     * but in some combinations with other modules, which overwrite the menu
     * entry in hook_menu, calling aggregator_page_rss is causing an error. 
     * the following lines are going to prevent the fatal error
     */
    $aggregator_module_path = drupal_get_path('module', 'aggregator');
    include_once($aggregator_module_path .'/aggregator.pages.inc');
  }
  aggregator_page_rss();
  fastwebfeed_ob_end();
}

/**
 * Implementation of hook_cron().
 *
 * Checks news feeds for updates once their refresh interval has elapsed.
 */
function fastwebfeed_aggregator_cron() {
  $check_ping_on_cron = variable_get('fastwebfeed_aggregator_check_ping_on_cron_admin', '');
  if ($check_ping_on_cron == 1) {
    if (module_exists(fastwebfeed_pubsubhubbub) || module_exists(fastwebfeed_sup)) {
      $feed_urls = fastwebfeed_get_feed_url('', 'aggregator');
      if (variable_get('fastwebfeed_check_watchdog_log_admin', '') == 1) {
        watchdog('fastwebfeed', 'Cron -start- fastwebfeed_aggregator');
      }
      if (module_exists(fastwebfeed_pubsubhubbub)) {
        if (!fastwebfeed_pubsubhubbub_fastwebfeed_ping($feed_urls)) {
          drupal_set_message(t("Pubsubhubbub warning: no feed URL's"), 'warning');
        }
      }
      if (module_exists(fastwebfeed_sup)) {
        if (!fastwebfeed_sup_fastwebfeed_ping($feed_urls)) {
          drupal_set_message(t("SUP warning: no feed URL's"), 'warning');
        }
      }
      if (variable_get('fastwebfeed_check_watchdog_log_admin', '') == 1) {
        watchdog('fastwebfeed', 'Cron -end- fastwebfeed_aggregator');
      }
      module_invoke_all('fastwebfeed_path', '', 'reset all');
    }
  }
}

/**
 * Implementation of the hook_fastwebfeed_path()
 * 
 * @param $object
 *   an Object
 * @param $type
 *   A string indicates the type of a fastwebfeed path
 * @return $feed_paths
 * 	 Returns an array of feed paths
 * 
 * @see fastwebfeed.module
 */
function fastwebfeed_aggregator_fastwebfeed_path($object, $type) {
  $feed_paths = array();
  switch ($type) {
    case 'reset all':
      $feed_paths = _fastwebfeed_aggregator_fastwebfeed_path_reset_all();
    break;
    case 'all':
      $feed_paths = _fastwebfeed_aggregator_fastwebfeed_path_all();
    break;
    case 'aggregator':
      $feed_paths = _fastwebfeed_aggregator_fastwebfeed_path_aggregator();
    break;
  }
  $feed_paths = array_unique($feed_paths);
  return $feed_paths;
}

/**
 * Returns all "aggregator" fastwebfeed paths to the the hook_fastwebfeed_path()
 * 
 * @return $feed_paths
 * 	Returns an array of feed paths
 * 
 * @see fastwebfeed_aggregator_fastwebfeed_path()
 */
function _fastwebfeed_aggregator_fastwebfeed_path_all() {
      $feed_paths = array();
      $feed_paths = variable_get('fastwebfeed_aggregator_feed_paths', '');
      if (empty($feed_paths)) {
        fastwebfeed_aggregator_fastwebfeed_path('', 'reset all');
        $feed_paths = variable_get('fastwebfeed_aggregator_feed_paths', '');
      }
      return $feed_paths;
}

/**
 * Resets all "aggregator" fastwebfeed paths and
 * returns all "aggregator" fastwebfeed paths to the the hook_fastwebfeed_path()
 * 
 * @return $feed_paths
 * 	Returns an array of feed paths
 * 
 * @see fastwebfeed_aggregator_fastwebfeed_path()
 */
function _fastwebfeed_aggregator_fastwebfeed_path_reset_all() {
      $feed_paths = array();
      $feed_paths = _fastwebfeed_aggregator_fastwebfeed_path_aggregator();
      $feed_paths = array_unique($feed_paths);
      variable_set('fastwebfeed_aggregator_feed_paths', $feed_paths);
      return $feed_paths;
}

/**
 * Returns specific "aggregator" fastwebfeed paths to the the hook_fastwebfeed_path()
 * 
 * @return $feed_paths
 * 	Returns an array of feed paths
 * 
 * @see fastwebfeed_aggregator_fastwebfeed_path()
 */
function _fastwebfeed_aggregator_fastwebfeed_path_aggregator() {
  $feed_paths = array();
  $check_ping_on_cron = variable_get('fastwebfeed_aggregator_check_ping_on_cron_admin', '');
  $check_aggregator_feed = variable_get('fastwebfeed_aggregator_check_aggregator_feed_admin', '');
  $check_category_all = variable_get('fastwebfeed_aggregator_check_category_all_admin', '');
  $check_category_some = variable_get('fastwebfeed_aggregator_check_category_some_admin', '');
  if ($check_ping_on_cron == 1) {
    if ($check_aggregator_feed == 1) {
      $feed_paths[] = 'aggregator/rss';
    }
    if ($check_category_all == 1 || $check_category_some == 1) {
      $result = db_query('SELECT * FROM {aggregator_category}');
      while ($categorie = db_fetch_object($result)) {
        if ($check_category_all == 1) {
          $feed_paths[] = 'aggregator/rss/'. $categorie->cid;
        }
        else {
          $select_category = variable_get('fastwebfeed_aggregator_select_category_admin', '');
          if (!empty($select_category)) {
            foreach ($select_category as $key_select_category => $value_select_category) {
              if ($categorie->cid == $key_select_category) {
                $feed_paths[] = 'aggregator/rss/'. $categorie->cid;
              }
            }
          }
        }
      }
    }
  }
  return $feed_paths;
}