<?php
// $Id$
/**
 * @file
 * fastwebfeed_taxonomy.module
 * 
 * This a ".module"-file. 
 * 
 * @author Jo Bollen <fastwebfeed@gmail.com>
 * @site http://cupid-project.be/project/fastwebfeed-module
 * @filesource
 */

/**
 * Implementation of the hook_menu_alter()
 */
function fastwebfeed_taxonomy_menu_alter(&$items) {
  $items['taxonomy/term/%'] = array(
    'title' => 'Taxonomy term',
    'page callback' => 'fastwebfeed_taxonomy_handler_taxonomy_term_page',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
}

/**
 * Implementation of the hook_fastwebfeed_description()
 * Returns a piece of the Fastwebfeed admin info form
 * 
 * @return $output
 *   string
 *   
 * @see fastwebfeed.module
 */
function fastwebfeed_taxonomy_fastwebfeed_description() {
  global $base_path;
  $module_path = drupal_get_path('module', 'fastwebfeed');
  $module_path_sup = drupal_get_path('module', 'fastwebfeed_sup');
  $module_path_pubsubhubbub = drupal_get_path('module', 'fastwebfeed_pubsubhubbub');
  $module_path_taxonomy = drupal_get_path('module', 'fastwebfeed_taxonomy');
  
  $output = '
  		<ul>
    		<li>fastwebfeed_taxonomy.module
      		<ul>
      			<li>Settings: '. l('Administer > Site configuration > Fastwebfeed > plugged modules - "Settings for the taxonomy.module', 'admin/settings/fastwebfeed/plugged_modules') .'</li>
      			<li>Read '. l('CHANGELOG.txt', $module_path_taxonomy .'/CHANGELOG.txt') .'</li>
      		</ul>
      	</li>
    	</ul>';
  return $output;
}

/**
 * Implementation of the hook_fastwebfeed_plugged_modules_admin()
 * A piece of the Fastwebfeed admin setting form
 * Administer -> Site configuration -> fastwebfeed -> plugged modules
 * 
 * @return array $form 
 * 
 * @see fastwebfeed.module
 */
function fastwebfeed_taxonomy_fastwebfeed_plugged_modules_admin() {
  global $base_url, $base_path;
  $fastwebfeed_sup_module_path = drupal_get_path('module', 'fastwebfeed_taxonomy');
  $fastwebfeed_module_path = drupal_get_path('module', 'fastwebfeed');
  
  $form['fieldset_fastwebfeed_taxonomy'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings for the taxonomy.module'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['fieldset_fastwebfeed_taxonomy']['fieldset_taxonomy_when_to_ping'] = array(
    '#type' => 'fieldset',
    '#title' => t('When to ping (or notify)?'),
    '#description' => t('The question is, when to ping a service (or notify a hub) with an updated "taxonomy" feed?'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['fieldset_fastwebfeed_taxonomy']['fieldset_taxonomy_when_to_ping']['fastwebfeed_taxonomy_check_ping_on_node_submission_admin'] = array(
    '#type' => 'checkbox',
    '#title' => t('On "node" submission.'),
    '#description' => t('If checked, the hubs/services will be notified on "node" submission with a update notification refered to the updated "taxonomy" feed.'),
    '#default_value' => variable_get('fastwebfeed_taxonomy_check_ping_on_node_submission_admin', ''),
  );
  
  $form['fieldset_fastwebfeed_taxonomy']['fieldset_taxonomy_what_to_ping'] = array(
    '#type' => 'fieldset',
    '#title' => t('What to ping (or notify)?'),
    '#description' => t('The question is, which "taxonomy" feed must be pinged to a service? (or which feed must be notified to a hub?)'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['fieldset_fastwebfeed_taxonomy']['fieldset_taxonomy_what_to_ping']['fieldset_taxonomy_feed'] = array(
    '#type' => 'fieldset',
    '#title' => t('taxonomy feed(s)'),
    '#description' => t('<em>example: '. l($base_url . $base_path .'taxonomy/term/1/0/feed', 'taxonomy/term/1/0/feed', array('attributes' => array('target' => '_blank'))) .'</em>'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['fieldset_fastwebfeed_taxonomy']['fieldset_taxonomy_what_to_ping']['fieldset_taxonomy_feed']['fastwebfeed_taxonomy_check_node_types_all_admin'] = array(
    '#type' => 'checkbox',
    '#title' => t('All node types'),
    '#description' => t('If checked, the "taxonomy" feeds of "All node types" will be notified/pinged.'),
    '#default_value' => variable_get('fastwebfeed_taxonomy_check_node_types_all_admin', ''),
  );
  $form['fieldset_fastwebfeed_taxonomy']['fieldset_taxonomy_what_to_ping']['fieldset_taxonomy_feed']['fastwebfeed_taxonomy_check_node_types_some_admin'] = array(
    '#type' => 'checkbox',
    '#title' => t('One of the following node types'),
    '#description' => t('If checked, only the "taxonomy" feeds of "One of the following node types" will be notified/pinged.'),
    '#default_value' => variable_get('fastwebfeed_taxonomy_check_node_types_some_admin', ''),
  );
  $form['fieldset_fastwebfeed_taxonomy']['fieldset_taxonomy_what_to_ping']['fieldset_taxonomy_feed']['fastwebfeed_taxonomy_select_node_types_admin'] = array(
    '#type' => 'select',
    '#title' => t('Overview of node types'),
    '#description' => t('Select one of the following node types.<br/>
    <em style="color:red;">Attention: This effects the update notification of the "taxonomy feed(s)" below.</em>'),
    '#default_value' => variable_get('fastwebfeed_taxonomy_select_node_types_admin', ''),
    '#options' => node_get_types('names'),
    '#multiple' => TRUE,
  );
  $form['fieldset_fastwebfeed_taxonomy']['fieldset_taxonomy_what_to_ping']['fieldset_taxonomy_feed']['fastwebfeed_taxonomy_check_taxonomy_all_admin'] = array(
    '#type' => 'checkbox',
    '#title' => t('All terms'),
    '#description' => t('If checked, the "taxonomy" feeds of "All terms" will be notified/pinged.'),
    '#default_value' => variable_get('fastwebfeed_taxonomy_check_taxonomy_all_admin', ''),
  );
  $form['fieldset_fastwebfeed_taxonomy']['fieldset_taxonomy_what_to_ping']['fieldset_taxonomy_feed']['fastwebfeed_taxonomy_check_taxonomy_some_admin'] = array(
    '#type' => 'checkbox',
    '#title' => t('One of the following terms'),
    '#description' => t('If checked, only the "taxonomy" feeds of "One of the following terms" will be notified/pinged.<br/>'),
    '#default_value' => variable_get('fastwebfeed_taxonomy_check_taxonomy_some_admin', ''),
  );
  $form['fieldset_fastwebfeed_taxonomy']['fieldset_taxonomy_what_to_ping']['fieldset_taxonomy_feed']['fastwebfeed_taxonomy_select_taxonomy_admin'] = array(
    '#type' => 'select',
    '#title' => t('Overview of terms'),
    '#description' => t('Select one of the following terms.'),
    '#default_value' => variable_get('fastwebfeed_taxonomy_select_taxonomy_admin', ''),
    '#options' => taxonomy_form_all(),
    '#multiple' => TRUE,
  );
  return $form;
}

/**
 * Extends the taxonomy feeds (taxonomy/term/?/?/feed) with:
 * - SUP protocol
 * - pubsubhubbub and the hubbub protocol
 * 
 * @param $str_tids
 *   string of term id's
 * @param $depth
 * 	 How many levels deep to traverse the taxonomy tree.
 * @param $op
 *   A string containing a format to return.
 * @return mixed 
 * 	 a feed or page not found
 */
function fastwebfeed_taxonomy_handler_taxonomy_term_page($str_tids = '', $depth = 0, $op = 'page') {
  if ($op == 'feed') {
    fastwebfeed_ob_start();
  }
  if (!function_exists('taxonomy_term_page')) {
    /** 
     * including the taxonomy.pages.inc file shouldn't be necessary, because
     * TaxMan is correctly using hook_menu_alter to change the callback.
     * but in some combinations with other modules, which overwrite the menu
     * entry in hook_menu, calling taxonomy_term_page is causing an error. 
     * the following lines are going to prevent the fatal error
     */
    $taxonomy_module_path = drupal_get_path('module', 'taxonomy');
    include_once($taxonomy_module_path .'/taxonomy.pages.inc');
  }
  if ($op == 'feed') {
    taxonomy_term_page($str_tids, $depth, $op);
  }
  else {
    return taxonomy_term_page($str_tids, $depth, $op);
  }
  if ($op == 'feed') {
    fastwebfeed_ob_end();
  }
}

/**
 * Implementation of hook_nodeapi().
 * Publish the node update to each hub.
 */
function fastwebfeed_taxonomy_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  $check_ping_on_node = variable_get('fastwebfeed_taxonomy_check_ping_on_node_submission_admin', '');
  if ($check_ping_on_node == 1) {
    switch ($op) {
      case 'insert':
        if (module_exists(fastwebfeed_pubsubhubbub) || module_exists(fastwebfeed_sup)) {
        $feed_urls = fastwebfeed_get_feed_url($node, 'taxonomy');
        if (module_exists(fastwebfeed_pubsubhubbub)) {
          if (!fastwebfeed_pubsubhubbub_fastwebfeed_ping($feed_urls)) {
            drupal_set_message(t("Pubsubhubbub warning: no feed URL's"), 'warning');
          }
        }
        if (module_exists(fastwebfeed_sup)) {
          if (!fastwebfeed_sup_fastwebfeed_ping($feed_urls)) {
            drupal_set_message(t("SUP warning: no feed URL's"), 'warning');
          }
        }
        module_invoke_all('fastwebfeed_path', '', 'reset all');
      }
      break;
    }
  }
}

/**
 * Implementation of the hook_taxonomy
 */
function fastwebfeed_taxonomy_taxonomy($op, $type, $array = NULL) {
  if ($op == 'insert' || $op == 'update') {
    module_invoke_all('fastwebfeed_path', '', 'reset all');
  }
}

/**
 * Implementation of the hook_fastwebfeed_path()
 * 
 * @param $node
 *   A "node" Object
 * @param $type
 *   A string indicates the type of a fastwebfeed path
 * @return $feed_paths
 * 	 Returns an array of feed paths
 * 
 * @see fastwebfeed.module
 */
function fastwebfeed_taxonomy_fastwebfeed_path($node, $type) {
  $feed_paths = array();
  switch ($type) {
    case 'reset all':
      $feed_paths = _fastwebfeed_taxonomy_fastwebfeed_path_reset_all();
    break;
    case 'all':
      $feed_paths = _fastwebfeed_taxonomy_fastwebfeed_path_all();
    break;
    case 'taxonomy':
      $feed_paths = _fastwebfeed_taxonomy_fastwebfeed_path_taxonomy($node);
    break;
  }
  $feed_paths = array_unique($feed_paths);
  return $feed_paths;
}

/**
 * Returns all "taxonomy" fastwebfeed paths to the the hook_fastwebfeed_path()
 * 
 * @return $feed_paths
 * 	Returns an array of feed paths
 * 
 * @see fastwebfeed_taxonomy_fastwebfeed_path()
 */
function _fastwebfeed_taxonomy_fastwebfeed_path_all() {
      $feed_paths = array();
      $feed_paths = variable_get('fastwebfeed_taxonomy_feed_paths', '');
      if (empty($feed_paths)) {
        fastwebfeed_taxonomy_fastwebfeed_path('', 'reset all');
        $feed_paths = variable_get('fastwebfeed_taxonomy_feed_paths', '');
      }
      return $feed_paths;
}

/**
 * Resets all "taxonomy" fastwebfeed paths and
 * returns all "taxonomy" fastwebfeed paths to the the hook_fastwebfeed_path()
 * 
 * @return $feed_paths
 * 	Returns an array of feed paths
 * 
 * @see fastwebfeed_taxonomy_fastwebfeed_path()
 */
function _fastwebfeed_taxonomy_fastwebfeed_path_reset_all() {
      $feed_paths = array();
      $feed_paths_ = array();
      $node = array();
      $result = db_query('SELECT n.nid, n.vid, n.type FROM {node} n');
      while ($node = db_fetch_object($result)) {
        $feed_paths_ = _fastwebfeed_taxonomy_fastwebfeed_path_taxonomy($node);
        foreach ($feed_paths_ as $feed_path_) {
          $feed_paths[] = $feed_path_;
        }
      }
      $feed_paths = array_unique($feed_paths);
      variable_set('fastwebfeed_taxonomy_feed_paths', $feed_paths);
      return $feed_paths;
}

/**
 * Returns specific "taxonomy" fastwebfeed paths to the the hook_fastwebfeed_path()
 * 
 * @return $feed_paths
 * 	Returns an array of feed paths
 * 
 * @see fastwebfeed_taxonomy_fastwebfeed_path()
 */
function _fastwebfeed_taxonomy_fastwebfeed_path_taxonomy($node) {
  $feed_paths = array();
  $check_ping_on_node = variable_get('fastwebfeed_taxonomy_check_ping_on_node_submission_admin', '');
  $check_node_types_all = variable_get('fastwebfeed_taxonomy_check_node_types_all_admin', '');
  $check_node_types_some = variable_get('fastwebfeed_taxonomy_check_node_types_some_admin', '');
  $check_taxonomy_all = variable_get('fastwebfeed_taxonomy_check_taxonomy_all_admin', '');
  $check_taxonomy_some = variable_get('fastwebfeed_taxonomy_check_taxonomy_some_admin', '');
  if ($check_ping_on_node == 1) {
    if ($check_node_types_all == 1 || $check_node_types_some == 1 || $check_taxonomy_all == 1 || $check_taxonomy_some == 1) {
      $terms = taxonomy_node_get_terms($node);
      if ($check_taxonomy_all == 1) {
        foreach ($terms as $key_term => $value_term) {
          if ($check_node_types_all == 1) {
            $feed_paths[] = 'taxonomy/term/'. $value_term->tid .'/0/feed';
          }
          elseif ($check_node_types_some == 1) {
            $select_node_types = variable_get('fastwebfeed_taxonomy_select_node_types_admin', '');
            foreach ($select_node_types as $key_select_node_type => $value_select_node_type) {
              if ($node->type == $key_select_node_type) {
                $feed_paths[] = 'taxonomy/term/'. $value_term->tid .'/0/feed';
              }
            }
          }
        }
      }
      elseif ($check_taxonomy_some == 1) {
        $select_terms = variable_get('fastwebfeed_taxonomy_select_taxonomy_admin', '');
        foreach ($select_terms as $key_select_term => $value_select_term) {
          foreach ($terms as $key_term => $value_term) {
            if ($value_term->tid == $key_select_term) {
              if ($check_node_types_all == 1) {
                $feed_paths[] = 'taxonomy/term/'. $value_term->tid .'/0/feed';
              }
              elseif ($check_node_types_some == 1) {
                $select_node_types = variable_get('fastwebfeed_taxonomy_select_node_types_admin', '');
                foreach ($select_node_types as $key_select_node_type => $value_select_node_type) {
                  if ($node->type == $key_select_node_type) {
                    $feed_paths[] = 'taxonomy/term/'. $value_term->tid .'/0/feed';
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return $feed_paths;
}