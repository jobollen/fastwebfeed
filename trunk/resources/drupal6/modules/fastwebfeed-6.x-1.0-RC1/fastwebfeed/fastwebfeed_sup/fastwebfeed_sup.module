<?php
// $Id$
/**
 * @file
 * fastwebfeed_sup.module
 * 
 * This a ".module"-file. 
 * 
 * @author Jo Bollen <fastwebfeed@gmail.com>
 * @site http://cupid-project.be/project/fastwebfeed-module
 * @filesource
 */

/**
 * Implementation of the hook_theme()
 * 
 * @return array
 */
function fastwebfeed_sup_theme() {
  return array(
    'fastwebfeed_sup_service_link_table' => array(
      'arguments' => array($sup_service = ''),
    ),
    'fastwebfeed_sup_service_table' => array(
      'arguments' => array(),
    ),
  );
}

/**
 * Implementation of the hook_menu()
 * Administer -> Site configuration -> sup

 * @param bool $may_cache
 * @return array $items
 */
function fastwebfeed_sup_menu() {
  $items = array();
  $items['admin/settings/fastwebfeed/sup'] = array(
    'title' => 'SUP',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fastwebfeed_sup_service_settings_admin'),
    'weight' => 10,
    'access arguments' => array('administer fastwebfeed'),
  );
  $items['admin/settings/fastwebfeed/sup/services'] = array(
    'title' => 'Service(s) settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'access arguments' => array('administer fastwebfeed'),
  );
  
  $sup_services = _sup_service_query_all();

  $items['admin/settings/fastwebfeed/sup/service/link'] = array(
    'title' => 'Service <LINK> attributes',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fastwebfeed_sup_service_link_settings_admin', $sup_services[0]),
    'weight' => 1,
    'access arguments' => array('administer fastwebfeed'),
  );
  
  $count = 1;
  // coding standards: The menu system has been completely over-hauled in 6.x, and if you are looping, you are probably doing something wrong.
  // but node.module line1481 is foreach() used !! 
  foreach ($sup_services AS $sup_service) {
    $sup_service_id = $sup_service->sup_service_id;
    $items['admin/settings/fastwebfeed/sup/service/link/'. $sup_service_id] = array(
      'title' => $sup_service->name,
      'type' => $count == 1 ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fastwebfeed_sup_service_link_settings_admin', $sup_service),
      'weight' => $count,
      'access arguments' => array('administer fastwebfeed'),
    );
    $count++;
  }
  return $items;
}

/**
 * Add a sup_service definition
 * 
 * @param object $sup_service
 *   Contains a sup_service object (name, name_des, ping_url, url, supid_length, status) to add in the database.
 */
function _sup_service_query_add($sup_service = NULL) {
  if ($sup_service !== NULL) {
    db_query("INSERT INTO {sup_service} (name, name_desc, ping_url, url, supid_length, status) VALUES ('%s', '%s', '%s', '%s', %d, %d)", $sup_service->name, $sup_service->name_desc, $sup_service->ping_url, $sup_service->url, $sup_service->supid_length, $sup_service->status);
  }
}
/**
 * Delete a sup_service definition
 *
 * @param object $sup_service
 *   Contains a sup_service object (sup_service_id, ...) to delete in the database
 */
function _sup_service_query_delete($sup_service = NULL) {
  if ($sup_service !== NULL) {
    db_query("DELETE FROM {sup_service} WHERE sup_service_id = %d", $sup_service->sup_service_id);
  }
}
/**
 * Update a sup_service definition
 *
 * @param object $sup_service
 *   Contains a sup_service object (sup_sservice_id, name, name_des, ping_url, url, supid_length, status) to update in the database.
 */
function _sup_service_query_update($sup_service = NULL) {
  if ($sup_service !== NULL) {
    db_query("UPDATE {sup_service} SET name = '%s', name_desc = '%s', ping_url = '%s', url = '%s', supid_length = '%d', status = '%d' WHERE sup_service_id = '%d'", $sup_service->name, $sup_service->name_desc, $sup_service->ping_url, $sup_service->url, $sup_service->supid_length, $sup_service->status , $sup_service->sup_service_id);
  }
}

/**
 * Query all sup_services with a filter on the $sup_service_id
 *
 * @param array $sup_service_ids
 *   an array of sup service ID's
 * @return array $sup_services
 *   an array of sup_service objects
 */
function _sup_service_query_sup_service_ids($sup_service_ids = NULL) {
  if ($sup_service_ids !== NULL && is_array($sup_service_ids)) {
    $in_condition = implode(",", $sup_service_ids);
    if (!empty($in_condition)) {
      $result = db_query("SELECT * FROM {sup_service} WHERE sup_service_id in (%s)", $in_condition);
      $sup_services = array();
      $sup_services_counter = 0;
      while ($sup_service = db_fetch_object($result)) {
        $sup_services[$sup_services_counter] = $sup_service;
        $sup_services[$sup_services_counter]->link = _sup_service_link_get_active_links($sup_service);
        $sup_services_counter++;
      }
      return $sup_services;
    }
    return '';
  }
  return '';
}

/**
 * Query all SUP services with a filter on the $status
 *
 * @param string $status
 *   the status
 * @return array $sup_services
 *   an array of sup_service objects
 */
function _sup_service_query_status($status = '1') {
  $result = db_query("SELECT * FROM {sup_service} WHERE status = '%d' ORDER BY sup_service_id", $status);
  $sup_services = array();
  $sup_services_counter = 0;
  while ($sup_service = db_fetch_object($result)) {
    $sup_services[$sup_services_counter] = $sup_service;
    $sup_services[$sup_services_counter]->link = _sup_service_link_get_active_links($sup_service);
    $sup_services_counter++;
  }
  return $sup_services;
}

/**
 * Query all sup_services
 *
 * @return array $sup_services
 *   an array of sup_service objects 
 */
function _sup_service_query_all() {
  $result = db_query("SELECT * FROM {sup_service} ORDER BY sup_service_id");
  $sup_services = array();
  $sup_services_counter = 0;
  while ($sup_service = db_fetch_object($result)) {
    $sup_services[$sup_services_counter] = $sup_service;
    $sup_services[$sup_services_counter]->link = _sup_service_link_get_active_links($sup_service);
    $sup_services_counter++;
  }
  return $sup_services;
}

/**
 * Add a Link of the sup_service definition
 * 
 * @param object $sup_service_link
 *   Contains a sup_service_link object (sup_service_id, attr_value, attr_key, status) to add in the database.
 */
function _sup_service_link_query_add($sup_service_link = NULL) {
  if ($sup_service_link !== NULL) {
    db_query("INSERT INTO {sup_service_link} (sup_service_id, attr_value, attr_key, status) VALUES ('%d', '%s', '%s', %d)", $sup_service_link->sup_service_id, $sup_service_link->attr_value, $sup_service_link->attr_key, $sup_service_link->status);
  }
}

/**
 * Delete a Link of the sup_service definition
 *
 * @param object $sup_service_link
 *   Contains a sup_service_link object (sup_service_link_id, ...) to delete in the database
 */
function _sup_service_link_query_delete($sup_service_link = NULL) {
  if ($sup_service_link !== NULL) {
    db_query("DELETE FROM {sup_service_link} WHERE sup_service_link_id = %d", $sup_service_link->sup_service_link_id);
  }
}
/**
 * Update a Link of the sup_service definition
 *
 * @param object $sup_service
 *   Contains a sup_service object (sup_sservice_link_id, sup_sservice_id, name, name_des, ping_url, url, supid_length, status) to update in the database.
 */
function _sup_service_link_query_update($sup_service_link = NULL) {
  if ( $sup_service_link !== NULL) {
    db_query("UPDATE {sup_service_link} SET sup_service_id = '%d', attr_value = '%s', attr_key = '%s', status = '%d' WHERE sup_service_link_id = '%d'", $sup_service_link->sup_service_id, $sup_service_link->attr_value, $sup_service_link->attr_key, $sup_service_link->status, $sup_service_link->sup_service_link_id);
  }
}

/**
 * Query all the attributes of a &lt;LINK&gt;-element, with a filter on the $sup_service_id
 *
 * @param string $sup_service_id
 *   A sup_service ID
 * @return array $sup_service_links
 * 	 An array of a sup_service_links objects
 */
function _sup_service_link_query_sup_service_id($sup_service_id = NULL) {
  if ($sup_service_id !== NULL) {
    $result = db_query("SELECT * FROM {sup_service_link} WHERE sup_service_id = %d ORDER BY sup_service_link_id", (int)$sup_service_id);
    $sup_service_links = array();
    $sup_service_links_counter = 0;
    while ($sup_service_link = db_fetch_object($result)) {
      $sup_service_links[$sup_service_links_counter] = $sup_service_link;
      $sup_service_links_counter++;
    }
    return $sup_service_links;
  }
  return '';
}

/**
 * Query all the attributes of a &lt;LINK&gt;-element, with a filter on the $status
 *
 * @param string $sup_service_id
 *   A sup_service ID
 * @param string $status
 *   The status
 * @return array $sup_service_links
 * 	 An array of a sup_service_links objects
 */
function _sup_service_link_query_sup_service_id_and_status($sup_service_id = NULL, $status = NULL) {
  if ($sup_service_id !== NULL && $status !== NULL) {
    $result = db_query("SELECT * FROM {sup_service_link} WHERE sup_service_id = %d AND status = %d ORDER BY sup_service_link_id", (int)$sup_service_id, (int)$status);
    $sup_service_links = array();
    $sup_service_link_counter = 0;
    while ($sup_service_link = db_fetch_object($result)) {
      $sup_service_links[$sup_service_link_counter] = $sup_service_link;
      $sup_service_link_counter++;
    }
    return $sup_service_links;
  }
  return '';
}

/**
 * Get a MD5 hashed SUP ID.
 * 
 * @param $str
 *   A string that must be hashed
 * @param $supid_length
 *   The length of the hash
 * @return string $str_md5
 *   A hashed SUP ID
 */
function _sup_get_hash_supid($str = '', $supid_length = 0) {
  $str_encoded = _fix_encoding($str);
  $str_md5 = md5($str_encoded);
  if ($supid_length > 0) {
    $str_md5 = drupal_substr($str_md5, 0, $supid_length);
  }
  return $str_md5; 
}

/**
 * Encodes the string in UTF-8
 * 
 * @param $in_str
 *   A string that must be encoded in UTF-8
 * @return $in_str
 *   A UTF-8 encoded string
 */
function _fix_encoding($in_str) {
  $cur_encoding = mb_detect_encoding($in_str) ;
  if ($cur_encoding == "UTF-8" && mb_check_encoding($in_str, "UTF-8"))
    return $in_str;
  else
    return utf8_encode($in_str);
}

/**
 * Get the definition of a &lt;LINK&gt;-element of a SUP service
 * 
 * @param string $return
 *   Return value is (string, array)
 * @param object $sup_service
 *   The SUP service object
 * @param string $sup_feed_url
 *   The URL of the fastwebfeed
 * @param string $sup_id
 *   The SUP ID
 * @return mixed
 *   Returns a string or array of a &lt;LINK&gt;-element
 */
function _sup_service_link_get_link($return = 'array', $sup_service = '', $sup_feed_url = '', $sup_id = '') {
  if ($sup_service == '' || $sup_feed_url == '') {
    return '';
  }
  else {
    $attributes = _sup_service_link_get_active_links($sup_service);
    switch ($return) {
      case 'string':
          $element_link = '<atom:link';
          foreach ($attributes as $attribute) {
              $element_link .= ' '. $attribute->attr_key .'="'. str_replace('%SUPID%', $sup_id, $attribute->attr_value) .'"';
          }
          $element_link .= ' />';
          return $element_link;
        break;
      case 'array':
      default:
          $element_link = array('key' => 'atom:link', 'attributes' => array());
          foreach ($attributes as $attribute) {
              $element_link['attributes'][$attribute->attr_key] = str_replace('%SUPID%', $sup_id, $attribute->attr_value);
          }
          $element_link = array($element_link);
          return $element_link;
      break;
    }
  }
}

/**
 * Get all active &lt;link&gt;-attributes
 * 
 * @param object $sup_service
 *   A SUP service objectS
 * @return $sup_service->link
 *   Returns the &lt;link&gt;-attributes needed for notifying the SUP services. 
 */
function _sup_service_link_get_active_links($sup_service = NULL) {
  if ($sup_service !== NULL) {
    $sup_service->link = _sup_service_link_query_sup_service_id_and_status($sup_service->sup_service_id, $sup_service->status);
    return $sup_service->link;
  }
  return '';
}

/**
 * Pings feed's to the defined SUP services
 * 
 * @param $feed_urls
 *   array of feed urls 
 * @return boolean
 *   return TRUE / FALSE
 */
function fastwebfeed_sup_fastwebfeed_ping($feed_urls = '') {
  if ($feed_urls != '' && !empty($feed_urls)) {
    $sup_services = _sup_service_get_active_services();
    if (!empty($sup_services)) {
      foreach ($sup_services as $sup_service) {
        $feed_urls_ = $feed_urls;
        foreach ($feed_urls_ as $feed_url) {
          // get SUP ID
          $sup_id = _sup_get_hash_supid($feed_url, $sup_service->supid_length);
          // get SUP ping URL
          $sup_ping_url = $sup_service->ping_url;
          $sup_ping_url = str_replace('%SUPID%', $sup_id, $sup_ping_url);
          $sup_ping_url = str_replace('%FEED_URL%', $feed_url, $sup_ping_url);
          drupal_http_request($sup_ping_url);
          
          
          $response = _sup_http_get($sup_ping_url);
          // publish the update to each hub
          if (!$response) {
              // TODO: add better error handling here
              drupal_set_message(t('SUP warning: publishing to the ping URL\'s(@ping_url) was not possible', array('@ping_url' => $sup_ping_url)), 'warning');
          }
        }
      }
      return TRUE;
    }
    return FALSE;
  }
  return TRUE;
}

/**
 * Get all SUP services that are select on the admin page
 *
 * @return array $sup_services
 *   Returns the active SUP services
 */
function _sup_service_get_active_services() {
  $check_service = variable_get('fastwebfeed_sup_check_sup_service_admin', '');
  $select_sup_service_ids = variable_get('fastwebfeed_sup_select_sup_service_admin', array(''));
  if (!empty($select_sup_service_ids) && $check_service == 1) {
    $sup_services = _sup_service_query_sup_service_ids($select_sup_service_ids);
    return $sup_services;
  }
  return '';
}

/**
 * Sends a GET-request to the SUP service via the drupal_http_request()
 *
 * @param string $ping_url
 *   The URL where the request is sended.
 * @return boolean
 * 	 TRUE if response is 200 else FALSE
 * 
 * @see fastwebfeed_sup_nodeapi() 
 */
function _sup_http_get($ping_url) {
  $response = drupal_http_request($ping_url);
  if (variable_get('fastwebfeed_check_watchdog_log_admin', '') == 1) {
    watchdog('fastwebfeed_sup', '
    fastwebfeed_sup<br/>
    <em>(SUP) PING URL: '. $ping_url .'</em>
    <br/>GET-response
    <ul><li><pre>RESPONSE request: '. $response->request .'</pre></li>
    <li><pre>RESPONSE data: '. $response->data .'</pre></li>
    <li><pre>RESPONSE headers: '. print_r($response->headers, TRUE) .'</pre></li>
    <li><pre>RESPONSE error: '. $response->error .'</pre></li>
    <li><pre>RESPONSE code: '. $response->code .'</pre></li></ul>');
  }
  // all good
  if ($response->code == 200 ) { 
    return TRUE;
  }
  drupal_set_message('fastwebfeed_sup.module', 'warning');
  drupal_set_message(filter_xss(print_r($response->request, TRUE)), 'warning');
  return FALSE;
}

// Administer -> Site configuration -> Fastwebfeed pages

/**
 * Admin settings form
 * Administer -> Site configuration -> Fastwebfeed -> SUP services -> Service(s) settings
 *
 * @return array $form 
 *   A form of fastwebfeed_sup_service_settings_admin()
 * 
 * @see fastwebfeed_sup_menu()
 */
function fastwebfeed_sup_service_settings_admin() {
  global $base_path;
  $module_path = drupal_get_path('module', 'fastwebfeed_sup');
  
  $form['fieldset_sup_service'] = array(
    '#type' => 'fieldset',
    '#title' => t('Service(s) settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  
  $form['fieldset_sup_service']['fieldset_edit_sup_service'] = array(
    '#type' => 'fieldset',
    '#title' => t('Edit a specific service'),
    '#description' => t('Edit a SUP service.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div class="edit-sup-service-admin">',
    '#suffix' => '</div>'
  );
  $form['fieldset_sup_service']['fieldset_edit_sup_service']['sup_service_table_admin'] = array(
    '#value' => theme('fastwebfeed_sup_service_table'),
  );
  
  $form['fieldset_sup_service']['fieldset_add_sup_service'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add a service'),
    '#description' => t('Add a SUP service.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div class="edit-sup-service-admin">',
    '#suffix' => '</div>'
  );  
  $form['fieldset_sup_service']['fieldset_add_sup_service']['sup_service_status_admin'] = array(
    '#type' => 'checkbox',
    '#title' => t('Status'),
    '#default_value' => TRUE,
    '#description' => t('When status is checked. This SUP service is activated.'),
  );
  
  $form['fieldset_sup_service']['fieldset_add_sup_service']['sup_service_name_admin'] = array(
    '#type' => 'textfield',
    '#title' => t('Service Name'),
    '#description' => t('The SUP-service name.'),
  );
  $form['fieldset_sup_service']['fieldset_add_sup_service']['sup_service_name_desc_admin'] = array(
    '#type' => 'textfield',
    '#title' => t('Service Name Description'),
    '#description' => t('The SUP-service name description.'),
  );
  $form['fieldset_sup_service']['fieldset_add_sup_service']['sup_service_ping_url_admin'] = array(
    '#type' => 'textfield',
    '#title' => t('Service Ping URL.'),
    '#description' => t('The SUP-service ping URL. <ul><li>If you want add the Feed URL use %FEED_URL%. ex. http://friendfeed.com/api/public-sup-ping?url=%FEED_URL%</li><li>If you want add the SUP-ID use %SUPID%. ex. http://friendfeed.com/api/public-sup-ping?supid=%SUPID%</li></ul> This Ping URL will be notified when a new post is added to the feed.'),
  );
  $form['fieldset_sup_service']['fieldset_add_sup_service']['sup_service_url_admin'] = array(
    '#type' => 'textfield',
    '#title' => t('Service URL'),
    '#description' => t('The SUP-service URL. <ul><li>If you want add the SUP-ID use %SUPID%. ex. http://friendfeed.com/api/sup.json#%SUPID%</li></ul> This service will also be added in the header of the xml feed X-SUP-ID.'),
  );
  $form['fieldset_sup_service']['fieldset_add_sup_service']['sup_service_supid_length_admin'] = array(
    '#type' => 'textfield',
    '#title' => t('SUP-ID length'),
    '#description' => t('The SUP-ID length. Generates automaticly a SUP-ID of the Feed URL.'),
  );
  
  $form['fieldset_sup_service_info'] = array(
    '#type' => 'fieldset',
    '#description' => t('Back to the fastwebfeed admin page. <a href="'. $base_path .'admin/settings/fastwebfeed/admin"><em>Administer > Site configuration > Fastwebfeed</em></a>'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save')
  );
  return $form;
}

/**
 * Themeble function for a table form. To edit/delete the SUP service definitions.
 *
 * @return string $output
 *   HTML table-output
 * 
 * @see fastwebfeed_sup_service_settings_admin()
 */
function theme_fastwebfeed_sup_service_table() {
  global $base_path;
  if (!sizeof($ns_var_array) > 0) {
    $table_headers = array(t('id'), t('name'), t('name desc'), t('ping url'), t('url'),  t('sup-id length'), t('status'), t('delete'));
    $headers = '';
    $rows = '';
    $i = 1;

    //table header
    foreach ($table_headers as $header) {
      $textalign= ($header == 'status' || $header == 'delete')?'center':'left';
      $headers .= '<th style="text-align:'. $textalign .';">'. $header .'</th>';
    }

    //all rows
    $sup_services = _sup_service_query_all();
    foreach ($sup_services as $key => $value) {
      $rows .= '<tr id="sup-service-list-'. $value->sup_service_id .'">
						<td><input style="width:20px;" readonly="readonly" type="text" name="row_sup_service_id_'. $i .'_'. $value->sup_service_id .'" value="'. $value->sup_service_id .'" /></td>
						<td><input type="text" name="row_sup_service_name_'. $i .'_'. $value->sup_service_id .'" value="'. $value->name .'" class="'. ((isset($_POST['row_sup_service_name_'. $i .'_'. $value->sup_service_id]) && $_POST['row_sup_service_name_'. $i .'_'. $value->sup_service_id] == '')?'error':'') .'" /></td>
						<td><input type="text" name="row_sup_service_name_desc_'. $i .'_'. $value->sup_service_id .'" value="'. $value->name_desc .'" class="'. ((isset($_POST['row_sup_service_name_desc_'. $i .'_'. $value->sup_service_id]) && $_POST['row_sup_service_name_desc_'. $i .'_'. $value->sup_service_id] == '')?'error':'') .'" /></td>
						<td><input type="text" name="row_sup_service_ping_url_'. $i .'_'. $value->sup_service_id .'" value="'. $value->ping_url .'" class="'. ((isset($_POST['row_sup_service_ping_url_'. $i .'_'. $value->sup_service_id]) && $_POST['row_sup_service_ping_url_'. $i .'_'. $value->sup_service_id] == '')?'error':'') .'" /></td>
						<td><input type="text" name="row_sup_service_url_'. $i .'_'. $value->sup_service_id .'" value="'. $value->url .'" class="'. ((isset($_POST['row_sup_service_url_'. $i .'_'. $value->sup_service_id]) && $_POST['row_sup_service_url_'. $i .'_'. $value->sup_service_id] == '')?'error':'') .'" /></td>
						<td><input style="width:40px;" type="text" name="row_sup_service_supid_length_'. $i .'_'. $value->sup_service_id .'" value="'. $value->supid_length .'" class="'. ((isset($_POST['row_sup_service_supid_length_'. $i .'_'. $value->sup_service_id]) && $_POST['row_sup_service_supid_length_'. $i .'_'. $value->sup_service_id] == '')?'error':'') .'" /></td>
						<td style="text-align: center;"><input type="checkbox" name="row_sup_service_status_'. $i .'_'. $value->sup_service_id .'" '. (($value->status == '1')?'checked=checked':'') .' value="1" /></td>
						<td style="text-align: center;"><input type="checkbox" name="row_sup_service_delete_'. $i .'_'. $value->sup_service_id .'" value="1" /></td>
					  </tr>
					  <tr><td colspan="8"><a href="'. $base_path .'admin/settings/fastwebfeed/sup/service/link/'. $value->sup_service_id .'" target="_self">add/edit the '. t('&lt;LINK&gt;-element') .' of this <em>"'. $value->name  .'"-service</em></a></td></tr>';
            $i++;
    }

    //table
    $output = '
    			<table id="sup-service-list-table">
						<thead id="sup-service-list-table-head"><tr>'. $headers .'</tr></thead>
						<tbody id="sup-service-list-table-body">'. $rows .'</tbody>
					</table>';
  }
  else {
    $output = 'Geen <em>SUP services</em> gevonden.';
  }

  $output = '
  	<div id="sup-service-list-table-placeholder">
		'. $output .'
		</div>';

  return $output;
}

/**
 * Performs validation on a custom form
 *
 * @param int $form
 * 	 A unique string identifying the form for validation.
 * @param array &$form_state
 *   An array of values mirroring the values returned by a given form
 *   
 * @see fastwebfeed_sup_service_settings_admin()
 */
function fastwebfeed_sup_service_settings_admin_validate($form, &$form_state) {
  // config settings
  $form_value_prefix = 'sup_service_';
  $form_value_admin_suffix = '_admin';
  $form_value_row_prefix = 'row_';
  $total_admin_fields = 6;
  $total_required_admin_fields = 1;
  fastwebfeed_form_validate($form, $form_state, $form_value_prefix, $form_value_admin_suffix, $form_value_row_prefix, $total_admin_fields, $total_required_admin_fields);
}

/**
 * Processes the custom-submitted form.
 *
 * @param int $form
 * 	 A unique string identifying the form for validation.
 * @param array &$form_state
 *   An array of values mirroring the values returned by a given form
 * 
 * @see fastwebfeed_sup_service_settings_admin()
 */
function fastwebfeed_sup_service_settings_admin_submit($form, &$form_state) {
  // config settings
  $function_query_add = '_sup_service_query_add';
  $function_query_delete = '_sup_service_query_delete';
  $function_query_update = '_sup_service_query_update';
  $form_value_prefix = 'sup_service_';
  $form_value_admin_suffix = '_admin';
  $form_value_row_prefix = 'row_';
  $total_admin_fields = 6;
  $total_required_admin_fields = 1;
  fastwebfeed_form_submit($form, $form_state, $function_query_add, $function_query_delete, $function_query_update, $form_value_prefix, $form_value_admin_suffix, $form_value_row_prefix, $total_admin_fields, $total_required_admin_fields);
  cache_clear_all('*', 'cache_menu', TRUE);
  menu_rebuild();
}

/**
 * Admin settings form
 * Administer -> Site configuration -> Fastwebfeed -> SUP service -> Service(s) &lt;LINK&gt;-attr  
 *
 * @param object $sup_service
 *   A object of a SUP service
 * @return array $form 
 *   A form of fastwebfeed_sup_service_link_settings_admin()
 * 
 * @see fastwebfeed_sup_menu()
 */
function fastwebfeed_sup_service_link_settings_admin(&$form_state, $sup_service = '') {
  if ($sup_service != '') {
    global $base_path;
    $module_path = drupal_get_path('module', 'fastwebfeed_sup');
  
    $form['fieldset_sup_service_link'] = array(
      '#type' => 'fieldset',
      '#title' => t('"@service" &lt;LINK&gt; attributes', array('@service' => $sup_service->name)),
      '#collapsible' => $collapsible,
      '#collapsed' => $collapsed,
    );
  
    $form['fieldset_sup_service_link']['fieldset_edit_sup_service_link'] = array(
      '#type' => 'fieldset',
      '#title' => t('Edit a specific attribute'),
      '#description' => t('Edit a &lt;LINK&gt;-attribute of the "@service"-service definition.', array('@service' => $sup_service->name)),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#prefix' => '<div class="edit-sup-feed-attr-admin">',
      '#suffix' => '</div>'
    );
    $form['fieldset_sup_service_link']['fieldset_edit_sup_service_link']['sup_service_link_table_admin'] = array(
      '#value' => theme('fastwebfeed_sup_service_link_table', $sup_service),
    );
    
    $form['fieldset_sup_service_link']['fieldset_add_sup_service_link'] = array(
      '#type' => 'fieldset',
      '#title' => t('Add a attribute'),
      '#description' => t('Add a &lt;LINK&gt;-attribute to the "@service"-service definition.', array('@service' => $sup_service->name)),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#prefix' => '<div class="edit-sup-feed-attr-admin">',
      '#suffix' => '</div>'
    );
    $form['fieldset_sup_service_link']['fieldset_add_sup_service_link']['sup_service_link_status_admin'] = array(
      '#type' => 'checkbox',
      '#title' => t('Status'),
      '#default_value' => TRUE,
      '#description' => t('When status is checked. This link attribute is activated.'),
    );
    $form['fieldset_sup_service_link']['fieldset_add_sup_service_link']['sup_service_link_sup_service_id_admin'] = array(
      '#type' => 'textfield',
      '#attributes' => array("readonly" => "readonly"),
      '#title' => t('SUP service ID'),
      '#default_value' => $sup_service->sup_service_id,
      '#description' => t('This is the SUP service ID of the "@service_id"-service', array('@service_id' => $sup_service->name)),
    );
    $form['fieldset_sup_service_link']['fieldset_add_sup_service_link']['sup_service_link_attr_key_admin'] = array(
      '#type' => 'textfield',
      '#title' => t('Attr. Key'),
      '#description' => t('the attribute key.'),
    );
    $form['fieldset_sup_service_link']['fieldset_add_sup_service_link']['sup_service_link_attr_value_admin'] = array(
      '#type' => 'textfield',
      '#title' => t('Attr. Value'),
      '#description' => t('the attribute value. If you want add the SUP-ID use %SUPID%. ex. http://friendfeed.com/api/sup.json#%SUPID%'),
    );
    
    $form['fieldset_sup_service_link_info'] = array(
      '#type' => 'fieldset',
      '#description' => t('Back to the fastwebfeed admin page. <a href="'. $base_path .'admin/settings/fastwebfeed/admin"><em>Administer > Site configuration > Fastwebfeed</em></a>'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save')
    );
  }
  return $form;
}

/**
 * Themeble function for a table form. To edit/delete the &lt;LINK&gt;-attributes of a SUP service definitions.
 *
 * @param object $sup_service
 *   A object of a SUP service
 * @return string $output
 *   HTML table-output
 * 
 * @see fastwebfeed_sup_service_link_settings_admin()
 */
function theme_fastwebfeed_sup_service_link_table($sup_service) {
  if ($sup_service != 0) {
    $table_headers = array(t('Link ID'), t('Service ID'), t('Attr. key'), t('Attr. value'), t('Status'), t('Delete'));
    $headers = '';
    $rows = '';
    $i = 1;

    //table headers
    foreach ($table_headers as $header) {
      $textalign= ($header == 'Status' || $header == 'Delete')?'center':'left';
      $headers .= '<th style="text-align:'. $textalign .';">'. $header .'</th>';
    }

    //all rows
    $sup_service_link = _sup_service_link_query_sup_service_id($sup_service->sup_service_id);
    foreach ($sup_service_link as $key => $value) {
      $rows .= '<tr id="sup-feed-list-'. $i .'">
						<td ><input style="width:20px;" type="text" readonly="readonly" name="row_sup_service_link_sup_service_link_id_'. $i .'_'. $value->sup_service_link_id .'" value="'. $value->sup_service_link_id .'" /></td>
						<td ><input style="width:20px;" type="text" readonly="readonly" name="row_sup_service_link_sup_service_id_'. $i .'_'. $value->sup_service_link_id .'" value="'. $value->sup_service_id .'" /></td>
						<td><input type="text" style="width:100%;" name="row_sup_service_link_attr_key_'. $i .'_'. $value->sup_service_link_id .'" value="'. $value->attr_key .'" class="'. ((isset($_POST['row_sup_service_link_attr_key_'. $i .'_'. $value->sup_service_link_id]) && $_POST['row_sup_service_link_attr_key_'. $i .'_'. $value->sup_service_link_id] == '')?'error':'') .'" /></td>
						<td><input type="text" style="width:100%;" name="row_sup_service_link_attr_value_'. $i .'_'. $value->sup_service_link_id .'" value="'. $value->attr_value .'" class="'. ((isset($_POST['row_sup_service_link_attr_value_'. $i .'_'. $value->sup_service_link_id]) && $_POST['row_sup_service_link_attr_value_'. $i .'_'. $value->sup_service_link_id] == '')?'error':'') .'" /></td>
						<td style="text-align: center;"><input type="checkbox" name="row_sup_service_link_status_'. $i .'_'. $value->sup_service_link_id .'" '. (($value->status == '1')?'checked=checked':'') .' value="1" /></td>
						<td style="text-align: center;"><input type="checkbox" name="row_sup_service_link_delete_'. $i .'_'. $value->sup_service_link_id .'" value="1" /></td>
					  </tr>';
            $i++;
    }

    //table
    $output = '
    			<table id="sup-service-list-table">
						<thead id="sup-service-list-table-head"><tr>'. $headers .'</tr></thead>
						<tbody id="sup-service-list-table-body">'. $rows .'</tbody>
					</table>';
  }
  else {
    $output = 'Geen <em>SUP services</em> gevonden.';
  }

  $output = '
  	<div id="sup-service-list-table-placeholder">
		'. $output .'
		</div>';

  return $output;
}

/**
 * Performs validation on a custom form
 *
 * @param int $form
 * 	 A unique string identifying the form for validation.
 * @param array &$form_state
 *   An array of values mirroring the values returned by a given form
 * 
 * @see fastwebfeed_sup_service_settings_admin()
 */
function fastwebfeed_sup_service_link_settings_admin_validate($form, &$form_state) {
  // config settings
  $form_value_prefix = 'sup_service_link_';
  $form_value_admin_suffix = '_admin';
  $form_value_row_prefix = 'row_';
  $total_admin_fields = 4;
  $total_required_admin_fields = 2;
  fastwebfeed_form_validate($form, $form_state, $form_value_prefix, $form_value_admin_suffix, $form_value_row_prefix, $total_admin_fields, $total_required_admin_fields);
}

/**
 * Processes the custom-submitted form.
 *
 * @param int $form
 * 	 A unique string identifying the form for validation.
 * @param array &$form_state
 *   An array of values mirroring the values returned by a given form
 * 
 * @see fastwebfeed_sup_service_settings_admin()
 */
function fastwebfeed_sup_service_link_settings_admin_submit($form, &$form_state) {
  // config settings
  $function_query_add = '_sup_service_link_query_add';
  $function_query_delete = '_sup_service_link_query_delete';
  $function_query_update = '_sup_service_link_query_update';
  $form_value_prefix = 'sup_service_link_';
  $form_value_admin_suffix = '_admin';
  $form_value_row_prefix = 'row_';
  $total_admin_fields = 4;
  $total_required_admin_fields = 2;
  fastwebfeed_form_submit($form, $form_state, $function_query_add, $function_query_delete, $function_query_update, $form_value_prefix, $form_value_admin_suffix, $form_value_row_prefix, $total_admin_fields, $total_required_admin_fields);
}

/**
 * A piece of the Fastwebfeed admin setting form
 * Administer -> Site configuration -> fastwebfeed -> settings
 * 
 * @return array $form 
 * 
 * @see fastwebfeed_settings_admin()
 */
function fastwebfeed_sup_include_fastwebfeed_settings_admin() {
  $form['fieldset_sup'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings: SimpleUpdateProtocol (SUP)'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['fieldset_sup']['fastwebfeed_sup_check_sup_service_admin'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate the SUP service'),
    '#description' => t('If checked, the SUP services will be activated and your website will send update notifications to them. '),
    '#default_value' => variable_get('fastwebfeed_sup_check_sup_service_admin', ''),
  );
  $form['fieldset_sup']['fastwebfeed_sup_select_sup_service_admin'] = array(
    '#type' => 'select',
    '#title' => t('Activate Services'),
    '#description' => t('Select the SUP service(s) to which you want to publish your feeds. <em>'. l('(edit here)', 'admin/settings/fastwebfeed/sup/services') .'</em>'),
    '#default_value' => variable_get('fastwebfeed_sup_select_sup_service_admin', array('')),
    '#options' => _sup_service_select_box(),
    '#multiple' => TRUE,
  ); 
  return $form;
}

/**
 * A select box of SUP services 
 * 
 * @return array $services_array
 *   Returns the names of the SUP services
 */
function _sup_service_select_box() {
  $services = _sup_service_query_status(1);
  $services_array = array();
  foreach ($services as $key => $value) {
    $services_array[$value->sup_service_id] = $value->name;
  }
  return $services_array;
}

function fastwebfeed_sup_include_fastwebfeed_info_admin($feed_url) {
  $output_inner = '';
  $sup_services = _sup_service_query_all();
  foreach ($sup_services as $sup_service) {
    // get SUP name
    $sup_name = $sup_service->name;
    // get SUP ID
    $sup_id = _sup_get_hash_supid($feed_url, $sup_service->supid_length);
    // get <link> element
    $sup_feed_link = _sup_service_link_get_link('string', $sup_service, $feed_url, $sup_id);
    // get SUP ping URL
    $sup_ping_url = $sup_service->ping_url;
    $sup_ping_url = str_replace('%SUPID%', $sup_id, $sup_ping_url);
    $sup_ping_url = str_replace('%FEED_URL%', $feed_url, $sup_ping_url);
    // get SUP URL
    $sup_url = $sup_service->url;
    $sup_url = str_replace('%SUPID%', $sup_id, $sup_url);
    $sup_url = str_replace('%FEED_URL%', $feed_url, $sup_url);
    
    // fill table
    $header = array();
    $header = array( t('<em>Service name</em>'), $sup_name );
    $rows = array();
    $rows[] =  array( array( 'data' => t( '<em>SUP-ID</em>' ) ), array( 'data' => $sup_id) );
    $rows[] =  array( array( 'data' => t( '<em>Ping URL</em>' ) ), array( 'data' => '<a href="'. $sup_ping_url .'" target="_blank" >'. $sup_ping_url .'</a>') );
    $rows[] =  array( array( 'data' => t( '<em>SUP URL</em>' ) ), array( 'data' => '<a href="'. $sup_url .'" target="_blank" >'. $sup_url .'</a>') );
    $rows[] =  array( array( 'data' => t( '<em>LINK element</em>' ) ), array( 'data' => htmlspecialchars  ( $sup_feed_link ) ) );
    // print table
    $output_inner .= '<div>';
    $output_inner .= theme('table', $header , $rows );
    $output_inner .= '</div>';
  }
  return $output_inner;
}