<?php
// $Id$
/**
 * @file
 * fastwebfeed_pubsubhubbub.module
 * 
 * This a ".module"-file. 
 * 
 * @author Jo Bollen <fastwebfeed@gmail.com>
 * @site http://cupid-project.be/project/fastwebfeed-module
 * @filesource
 */

/**
 * Implementation of the hook_theme()
 * 
 * @return array
 */
function fastwebfeed_pubsubhubbub_theme() {
  return array(
    'fastwebfeed_pubsubhubbub_hub_table' => array(
      'arguments' => array(),
    ),
  );
}

/**
 * include file ./includes/publisher.php
 * 
 * copy of http://code.google.com/p/pubsubhubbub/source/browse/trunk/publisher_clients/php/library/publisher.php
 */
include(drupal_get_path('module', 'fastwebfeed_pubsubhubbub') .'/includes/publisher.php');

/**
 * Implementation of the hook_menu()
 * Administer -> Site configuration -> pubsubhubbub
 *
 * @param bool $may_cache
 * @return array menu $items
 */
function fastwebfeed_pubsubhubbub_menu() {
  $items = array();
  $items['admin/settings/fastwebfeed/pubsubhubbub'] = array(
    'title' => 'Pubsubhubbub',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fastwebfeed_pubsubhubbub_hub_settings_admin'),
    'weight' => 10,
    'access arguments' => array('administer fastwebfeed'),
  );
  $items['admin/settings/fastwebfeed/pubsubhubbub/hub'] = array(
    'title' => 'Hub(s) settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'access arguments' => array('administer fastwebfeed'),
  );
  return $items;
}

/**
 * Add a pubsubhubbub_hub definition
 *
 * @param object $pubsubhubbub_hub
 *   Contains a pubsubhubbub_hub object (name, name_des, url, status) to add in the database.
 */
function _pubsubhubbub_query_add($pubsubhubbub_hub = NULL) {
  if ($pubsubhubbub_hub !== NULL) {
    db_query("INSERT INTO {pubsubhubbub_hub} (name, name_desc, url, status) VALUES ('%s', '%s', '%s', %d)", $pubsubhubbub_hub->name, $pubsubhubbub_hub->name_desc, $pubsubhubbub_hub->url, $pubsubhubbub_hub->status);
  }
}

/**
 * Delete a pubsubhubbub_hub definition
 *
 * @param object $pubsubhubbub_hub
 *   Contains a pubsubhubbub_hub object (pubsubhubbub_hub_id, ...) to delete in the database
 */
function _pubsubhubbub_query_delete($pubsubhubbub_hub = NULL) {
  if ($pubsubhubbub_hub !== NULL) {
    db_query("DELETE FROM {pubsubhubbub_hub} WHERE pubsubhubbub_hub_id = %d", $pubsubhubbub_hub->pubsubhubbub_hub_id);
  }
}
/**
 * Update a pubsubhubbub_hub definition
 * 
 * @param object $pubsubhubbub_hub
 *   Contains a pubsubhubbub_hub object (pubsubhubbub_hub, name, name_des, url, status) to update in the database.
 */
function _pubsubhubbub_query_update($pubsubhubbub_hub = NULL) {
  if ($pubsubhubbub_hub !== NULL) {
    db_query("UPDATE {pubsubhubbub_hub} SET name = '%s', name_desc = '%s', url = '%s', status = '%d' WHERE pubsubhubbub_hub_id = '%d'", $pubsubhubbub_hub->name, $pubsubhubbub_hub->name_desc, $pubsubhubbub_hub->url, $pubsubhubbub_hub->status , $pubsubhubbub_hub->pubsubhubbub_hub_id);
  }
}

/**
 * Query all pubsubhubbub_hubs with a filter on the $pubsubhubbub_hub_id
 *
 * @param array $pubsubhubbub_hub_ids
 *   an array of PubSubHubbub hub ID's
 * @return array $pubsubhubbub_hubs
 *   an array of pubsubhubbub_hubs objects
 */
function _pubsubhubbub_query_pubsubhubbub_hub_ids($pubsubhubbub_hub_ids = NULL) {
  if ($pubsubhubbub_hub_ids !== NULL && is_array($pubsubhubbub_hub_ids)) {
    $in_condition = implode(",", $pubsubhubbub_hub_ids);
    if (!empty($in_condition)) {
      $result = db_query("SELECT * FROM {pubsubhubbub_hub} WHERE pubsubhubbub_hub_id in (%s)", $in_condition);
      $pubsubhubbub_hubs = array();
      $pubsubhubbub_hubs_counter = 0;
      while ($pubsubhubbub_hub = db_fetch_object($result)) {
        $pubsubhubbub_hubs[$pubsubhubbub_hubs_counter] = $pubsubhubbub_hub;
        $pubsubhubbub_hubs_counter++;
      }
      return $pubsubhubbub_hubs;
    }
    return '';
  }
  return '';
}

/**
 * Query all pubsubhubbub_hubs with a filter on the $status
 *
 * @param string $status
 *   the status
 * @return array $pubsubhubbub_hubs
 *   an array of pubsubhubbub_hubs objects
 */
function _pubsubhubbub_query_status($status = '1') {
  $result = db_query("SELECT * FROM {pubsubhubbub_hub} WHERE status = '%d' ORDER BY pubsubhubbub_hub_id", $status);
  $pubsubhubbub_hubs = array();
  $pubsubhubbub_hubs_counter = 0;
  while ($pubsubhubbub_hub = db_fetch_object($result)) {
    $pubsubhubbub_hubs[$pubsubhubbub_hubs_counter] = $pubsubhubbub_hub;
    $pubsubhubbub_hubs_counter++;
  }
  return $pubsubhubbub_hubs;
}

/**
 * query all pubsubhubbub_hubs
 *
 * @return array $pubsubhubbub_hubs
 *   an array of pubsubhubbub_hubs objects
 */
function _pubsubhubbub_query_all() {
  $result = db_query("SELECT * FROM {pubsubhubbub_hub} ORDER BY pubsubhubbub_hub_id");
  $pubsubhubbub_hubs = array();
  $pubsubhubbub_hubs_counter = 0;
  while ($pubsubhubbub_hub = db_fetch_object($result)) {
    $pubsubhubbub_hubs[$pubsubhubbub_hubs_counter] = $pubsubhubbub_hub;
    $pubsubhubbub_hubs_counter++;
  }
  return $pubsubhubbub_hubs;
}

/**
 * Get the definition of a &lt;LINK&gt;-element of a PubSubHubbub Hub
 * 
 * @param string $return
 *   Return value is (string, array)
 * @param $pubsubhubbub_hub
 *   The PubSubHubbub Hub object
 * @return mixed
 *   Returns a string or array of a &lt;LINK&gt;-element
 */
function _pubsubhubbub_hub_link_get_link($return = 'array', $pubsubhubbub_hub = '') {
  if ($pubsubhubbub_hub == '') {
    return '';
  }
  else {
    switch ($return) {
      case 'string':
          $element_link = '<atom:link rel="hub" href="'. $pubsubhubbub_hub->url .'" />';
          return $element_link;
        break;
      case 'array':
      default:
          $element_link = array('key' => 'atom:link', 'attributes' => array('hub' => $pubsubhubbub_hub->url));
          return $element_link;
      break;
    }
  }
}

/**
 * Pings feed's to the defined hub's
 * 
 * @param $feed_urls
 *   array of feed urls 
 * @return boolean
 *   return TRUE / FALSE
 */
function fastwebfeed_pubsubhubbub_fastwebfeed_ping($feed_urls = '') {
  if ($feed_urls != '' && !empty($feed_urls)) {
    $pubsubhubbub_hubs = _pubsubhubbub_get_active_hubs();
    if (!empty($pubsubhubbub_hubs)) {
      foreach ($pubsubhubbub_hubs as $key => $value) {
        $p = new Publisher($value->url);
        $response = $p->publish_update($feed_urls, "_pubsubhubbub_http_post");
        // publish the update to each hub
        if (!$response) {
            // TODO: add better error handling here
            drupal_set_message(t('Pubsubhubbub warning: publishing to the hubs was not possible'), 'warning');
        } 
      }
      return TRUE;
    }
    return FALSE;
  }
  return TRUE;
}

/**
 * Get all PubSubHubbub Hubs that are select on the admin page
 *
 * @return array $pubsubhubbub_hubs
 *   Returns the active PubSubHubbub hubs
 */
function _pubsubhubbub_get_active_hubs() {
  $check_service = variable_get('fastwebfeed_pubsubhubbub_check_hub_service_admin', '');
  $select_hub_service_ids = variable_get('fastwebfeed_pubsubhubbub_select_hub_service_admin', array(''));
  if (!empty($select_hub_service_ids) && $check_service == 1) {
    $pubsubhubbub_hubs = _pubsubhubbub_query_pubsubhubbub_hub_ids($select_hub_service_ids);
    return $pubsubhubbub_hubs;
  }
  return '';
}

/*
 * Sends a POST-request to a hub via drupal_http_request()
 *
 * @param string $hub_url
 *   The URL where the request is sended.
 * @param string $post_string
 *   The POST content
 * @return boolean
 * 	 TRUE if response is 204 else FALSE
 *  
 * @see fastwebfeed_pubsubhubbub_nodeapi()
 */
function _pubsubhubbub_http_post($hub_url, $post_string) {
  $response = drupal_http_request($hub_url, array(), 'POST', $post_string);
  if (variable_get('fastwebfeed_check_watchdog_log_admin', '') == 1) {
    watchdog('fastwebfeed_pubsubhubbub', '
    fastwebfeed_pubsubhubbub<br/>
    <em>(PubSubHubbub) HUB URL: '. $hub_url .'</em> 
    <br/>
    POST-response
    <ul><li><pre>PARAMS: '. $post_string .'</pre></li>
    <li><pre>RESPONSE request: '. $response->request .'</pre></li>
    <li><pre>RESPONSE data: '. $response->data .'</pre></li>
    <li><pre>RESPONSE headers: '. print_r($response->headers, TRUE) .'</pre></li>
    <li><pre>RESPONSE error: '. $response->error .'</pre></li>
    <li><pre>RESPONSE code: '. $response->code .'</pre></li></ul>');
  }
  // all good
  if ($response->code == 204) { 
    return TRUE;
  }
  drupal_set_message('fastwebfeed_pubsubhubbub.module', 'warning');
  drupal_set_message(filter_xss(print_r($response->request, TRUE)), 'warning');
  return FALSE;
}

// Administer -> Site configuration -> Fastwebfeed pages

/**
 * Admin settings form
 * Administer -> Site configuration -> Fastwebfeed -> Pubsubhubbub -> Hub settings
 *
 * @return array $form 
 *   A form of fastwebfeed_pubsubhubbub_hub_settings_admin()
 * 
 * @see fastwebfeed_pubsubhubbub_menu()
 */
function fastwebfeed_pubsubhubbub_hub_settings_admin() {
  global $base_path;
  $module_path = drupal_get_path('module', 'fastwebfeed_pubsubhubbub');
  
  $form['fieldset_pubsubhubbub_hub'] = array(
    '#type' => 'fieldset',
    '#title' => t('Hub(s) settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  
  $form['fieldset_pubsubhubbub_hub']['fieldset_edit_pubsubhubbub_hub'] = array(
    '#type' => 'fieldset',
    '#title' => t('Edit a specific Hub'),
    '#description' => t('Edit the Pubsubhubbub Hub definitions'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div class="edit-pubsubhubbub-hub-admin">',
    '#suffix' => '</div>'
  );
  $form['fieldset_pubsubhubbub_hub']['fieldset_edit_pubsubhubbub_hub']['pubsubhubbub_hub_table_admin'] = array(
    '#value' => theme('fastwebfeed_pubsubhubbub_hub_table'),
  );
  
  $form['fieldset_pubsubhubbub_hub']['fieldset_add_pubsubhubbub_hub'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add a Hub'),
    '#description' => t('Add a Pubsubhubbub Hub definition'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div class="add-pubsubhubbub-hub-admin">',
    '#suffix' => '</div>'
  );
  $form['fieldset_pubsubhubbub_hub']['fieldset_add_pubsubhubbub_hub']['pubsubhubbub_hub_status_admin'] = array(
    '#type' => 'checkbox',
    '#title' => t('Status'),
    '#default_value' => TRUE,
    '#description' => t('When status is checked. This Pubsubhubbub is activated.'),
  );
  $form['fieldset_pubsubhubbub_hub']['fieldset_add_pubsubhubbub_hub']['pubsubhubbub_hub_name_admin'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#description' => t('The Pubsubhubbub Hub name.'),
  );
  $form['fieldset_pubsubhubbub_hub']['fieldset_add_pubsubhubbub_hub']['pubsubhubbub_hub_name_desc_admin'] = array(
    '#type' => 'textfield',
    '#title' => t('Name Description'),
    '#description' => t('The Pubsubhubbub Hub name description.'),
  );
  $form['fieldset_pubsubhubbub_hub']['fieldset_add_pubsubhubbub_hub']['pubsubhubbub_hub_url_admin'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#description' => t('The Pubsubhubbub Hub URL. This hub will be notified when a new post is added to the feed.'),
  );
  
  $form['fieldset_pubsubhubbub_hub_info'] = array(
    '#type' => 'fieldset',
    '#description' => t('Back to the fastwebfeed admin page. <a href="'. $base_path .'admin/settings/fastwebfeed/admin"><em>Administer > Site configuration > Fastwebfeed</em></a>'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save')
  );
  return $form;
}

/**
 * Themeble function for a table form. To edit/delete the PubSubHubbub Hubs definitions.
 *
 * @return string $output
 *   HTML table-output
 * @see fastwebfeed_pubsubhubbub_hub_settings_admin()
 */
function theme_fastwebfeed_pubsubhubbub_hub_table() {
  if (!sizeof($ns_var_array) > 0) {
    $table_headers = array(t('id'), t('name'), t('name desc'), t('url'), t('status'), t('delete'));
    $headers = '';
    $rows = '';
    $i = 1;

    //de headers van de tabel maken
    foreach ($table_headers as $header) {
      $textalign= ($header == 'status' || $header == 'delete')?'center':'left';
      $headers .= '<th style="text-align:'. $textalign .';'. $style .'">'. $header .'</th>';
    }

    //alle rijen maken
    $hubs = _pubsubhubbub_query_all();
    foreach ($hubs as $key => $value) {
      $rows .= '<tr id="pubsubhubbub-hub-list-'. $value->pubsubhubbub_hub_id .'">
						<td><input style="width:20px;" readonly="readonly" type="text" name="row_pubsubhubbub_hub_id_'. $i .'_'. $value->pubsubhubbub_hub_id .'" value="'. $value->pubsubhubbub_hub_id .'" /></td>
						<td><input type="text" name="row_pubsubhubbub_hub_name_'. $i .'_'. $value->pubsubhubbub_hub_id .'" value="'. $value->name .'" class="'. ((isset($_POST['row_pubsubhubbub_hub_name_'. $i .'_'. $value->pubsubhubbub_hub_id]) && $_POST['row_pubsubhubbub_hub_name_'. $i .'_'. $value->pubsubhubbub_hub_id] == '')?'error':'') .'" /></td>
						<td><input type="text" name="row_pubsubhubbub_hub_name_desc_'. $i .'_'. $value->pubsubhubbub_hub_id .'" value="'. $value->name_desc .'" class="'. ((isset($_POST['row_pubsubhubbub_hub_name_desc_'. $i .'_'. $value->pubsubhubbub_hub_id]) && $_POST['row_pubsubhubbub_hub_name_desc_'. $i .'_'. $value->pubsubhubbub_hub_id] == '')?'error':'') .'" /></td>
						<td><input type="text" name="row_pubsubhubbub_hub_url_'. $i .'_'. $value->pubsubhubbub_hub_id .'" value="'. $value->url .'" class="'. ((isset($_POST['row_pubsubhubbub_hub_url_'. $i .'_'. $value->pubsubhubbub_hub_id]) && $_POST['row_pubsubhubbub_hub_url_'. $i .'_'. $value->pubsubhubbub_hub_id] == '')?'error':'') .'" /></td>
						<td style="text-align: center;"><input type="checkbox" name="row_pubsubhubbub_hub_status_'. $i .'_'. $value->pubsubhubbub_hub_id .'" '. (($value->status == '1')?'checked=checked':'') .' value="1" /></td>
						<td style="text-align: center;"><input type="checkbox" name="row_pubsubhubbub_hub_delete_'. $i .'_'. $value->pubsubhubbub_hub_id .'"  value="1" /></td>
					  </tr>';
            $i++;
    }

    //de tabel maken met de headers en de rijden
    $output = '
    			<table id="pubsubhubbub-hub-list-table">
						<thead id="pubsubhubbub-hub-list-table-head"><tr>'. $headers .'</tr></thead>
						<tbody id="pubsubhubbub-hub-list-table-body">'. $rows .'</tbody>
					</table>';
  }
  else {
    $output = 'Geen <em>Pubsubhubbub Hubs</em> gevonden.';
  }

  $output = '
  	<div id="pubsubhubbub-hub-list-table-placeholder">
		'. $output .'
		</div>';

  return $output;
}

/**
 * Performs validation on a custom form
 *
 * @param int $form
 * 	 A unique string identifying the form for validation.
 * @param array $form_state
 *   An array of values mirroring the values returned by a given form
 *   
 * @see fastwebfeed_pubsubhubbub_hub_settings_admin()
 */
function fastwebfeed_pubsubhubbub_hub_settings_admin_validate($form, &$form_state) {
  // config settings
  $form_value_prefix = 'pubsubhubbub_hub_';
  $form_value_admin_suffix = '_admin';
  $form_value_row_prefix = 'row_';
  $total_admin_fields = 4;
  $total_required_admin_fields = 1;
  fastwebfeed_form_validate($form, $form_state, $form_value_prefix, $form_value_admin_suffix, $form_value_row_prefix, $total_admin_fields, $total_required_admin_fields);
}

/**
 * Processes the custom-submitted form.
 *
 * @param int $form
 * 	 A unique string identifying the form for validation.
 * @param array $form_state
 *   An array of values mirroring the values returned by a given form
 *   
 * @see fastwebfeed_pubsubhubbub_hub_settings_admin()
 */
function fastwebfeed_pubsubhubbub_hub_settings_admin_submit($form, &$form_state) {
  // config settings
  $function_query_add = '_pubsubhubbub_query_add';
  $function_query_delete = '_pubsubhubbub_query_delete';
  $function_query_update = '_pubsubhubbub_query_update';
  $form_value_prefix = 'pubsubhubbub_hub_';
  $form_value_admin_suffix = '_admin';
  $form_value_row_prefix = 'row_';
  $total_admin_fields = 4;
  $total_required_admin_fields = 1;
  fastwebfeed_form_submit($form, $form_state, $function_query_add, $function_query_delete, $function_query_update, $form_value_prefix, $form_value_admin_suffix, $form_value_row_prefix, $total_admin_fields, $total_required_admin_fields);
}

/**
 * A piece of the Fastwebfeed admin setting form
 * Administer -> Site configuration -> fastwebfeed -> settings
 * 
 * @return array $form 
 * 
 * @see fastwebfeed_settings_admin()
 */
function fastwebfeed_pubsubhubbub_include_fastwebfeed_settings_admin() {
  $form['fieldset_pubsubhubbub'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings: PubSubHubbub'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['fieldset_pubsubhubbub']['fastwebfeed_pubsubhubbub_check_hub_service_admin'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate the PubSubHubbub'),
    '#description' => t('If checked, the PubSubHubbub\'s will be activated and your website will send update notifications to them.'),
    '#default_value' => variable_get('fastwebfeed_pubsubhubbub_check_hub_service_admin', ''),
  );
  $form['fieldset_pubsubhubbub']['fastwebfeed_pubsubhubbub_select_hub_service_admin'] = array(
    '#type' => 'select',
    '#title' => t('Activate Hubs'),
    '#description' => t('Select the hub(s) to which you want to publish your feeds. <em>'. l('(edit here)', 'admin/settings/fastwebfeed/pubsubhubbub/hub') .'</em>'),
    '#default_value' => variable_get('fastwebfeed_pubsubhubbub_select_hub_service_admin', ''),
    '#options' => _pubsubhubbub_hub_select_box(),
    '#multiple' => TRUE,
  );
  return $form;
}

/**
 * A select box of pubsubhubbub hubs 
 * 
 * @return array $hubs_array
 *   Returns the names of the PubSubHubbubs
 */
function _pubsubhubbub_hub_select_box() {
  $hubs = _pubsubhubbub_query_status(1);
  $hubs_array = array();
  foreach ($hubs as $key => $value) {
    $hubs_array[$value->pubsubhubbub_hub_id] = $value->name;  
  }
  return $hubs_array;
}

function fastwebfeed_pubsubhubbub_include_fastwebfeed_info_admin() {
  $output_inner = '';
  $hubs = _pubsubhubbub_query_all();
  foreach ($hubs as $key => $value) {
    $hub_feed_link = _pubsubhubbub_hub_link_get_link('string', $value);
    $header = array();
    $header = array( t('<em>Hub name</em>'), $value->name );
    $rows = array();
    $rows[] =  array( array( 'data' => t( '<em>Name description</em>' ) ), array( 'data' => $value->name ) ) ;
    $rows[] =  array( array( 'data' => t( '<em>Hub URL</em>' ) ), array( 'data' => '<a href="'. $value->url .'" target="_blank" >'. $value->url .'</a>' ) ) ;
    $rows[] =  array( array( 'data' => t( '<em>LINK element</em>' ) ), array( 'data' => htmlspecialchars  ( $hub_feed_link ) ) );
    $output_inner .= '<div>';
    $output_inner .= theme('table', $header , $rows );
    $output_inner .= '</div>';
  }
  return $output_inner;
}